/* tslint:disable */
/* eslint-disable */
/**
 * Bluefin API
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AffiliateMetadata } from '../models';
// @ts-ignore
import type { AffiliateOnboardResponse } from '../models';
// @ts-ignore
import type { AffiliateSummary } from '../models';
// @ts-ignore
import type { CampaignMetadata } from '../models';
// @ts-ignore
import type { EpochConfigsResponse } from '../models';
// @ts-ignore
import type { EpochMetadata } from '../models';
// @ts-ignore
import type { GetAffiliateIntervalOverview200Response } from '../models';
// @ts-ignore
import type { GetAffiliateLeaderDashboard200Response } from '../models';
// @ts-ignore
import type { GetAffiliateOverview200Response } from '../models';
// @ts-ignore
import type { IntervalMetadata } from '../models';
// @ts-ignore
import type { IntervalRewards } from '../models';
// @ts-ignore
import type { OnboardAffiliateRequest } from '../models';
// @ts-ignore
import type { OnboardRefereeRequest } from '../models';
// @ts-ignore
import type { RefereeOnboardResponse } from '../models';
// @ts-ignore
import type { RewardsSummary } from '../models';
// @ts-ignore
import type { UpdateAffiliateFeeConfigRequest } from '../models';
// @ts-ignore
import type { UserCampaignRewards } from '../models';
/**
 * RewardsApi - axios parameter creator
 * @export
 */
export const RewardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns detailed earnings breakdown for an affiliate by interval, ordered by interval number in descending order.
         * @summary /rewards/affiliate/intervalOverview
         * @param {string} userAddress The address of the user to get interval overview for
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateIntervalOverview: async (userAddress: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddress' is not null or undefined
            assertParamExists('getAffiliateIntervalOverview', 'userAddress', userAddress)
            const localVarPath = `/v1/rewards/affiliate/intervalOverview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAddress !== undefined) {
                localVarQueryParameter['userAddress'] = userAddress;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns rankings and earnings for affiliates, sorted by the specified category.
         * @summary /rewards/affiliate/leaderDashboard
         * @param {GetAffiliateLeaderDashboardSortByEnum} [sortBy] The category to sort rankings by
         * @param {GetAffiliateLeaderDashboardSortOrderEnum} [sortOrder] The order to sort rankings by
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {string} [search] The name/address of the user to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateLeaderDashboard: async (sortBy?: GetAffiliateLeaderDashboardSortByEnum, sortOrder?: GetAffiliateLeaderDashboardSortOrderEnum, page?: number, limit?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rewards/affiliate/leaderDashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the affiliate metadata.
         * @summary /rewards/affiliate
         * @param {string} userAddress Specify wallet address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateMetadata: async (userAddress: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddress' is not null or undefined
            assertParamExists('getAffiliateMetadata', 'userAddress', userAddress)
            const localVarPath = `/v1/rewards/affiliate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAddress !== undefined) {
                localVarQueryParameter['userAddress'] = userAddress;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns detailed earnings breakdown for an affiliate users earnings (including perps, spot LP, lending), referral earnings, and total earnings.
         * @summary /rewards/affiliate/overview
         * @param {string} userAddress Specify wallet address.
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {GetAffiliateOverviewSortByEnum} [sortBy] The category to sort earnings by
         * @param {GetAffiliateOverviewSortOrderEnum} [sortOrder] The order to sort earnings by
         * @param {string} [search] The name/address of the user to filter by
         * @param {string} [minEarningsE9] The minimum earnings to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateOverview: async (userAddress: string, page?: number, limit?: number, sortBy?: GetAffiliateOverviewSortByEnum, sortOrder?: GetAffiliateOverviewSortOrderEnum, search?: string, minEarningsE9?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddress' is not null or undefined
            assertParamExists('getAffiliateOverview', 'userAddress', userAddress)
            const localVarPath = `/v1/rewards/affiliate/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (userAddress !== undefined) {
                localVarQueryParameter['userAddress'] = userAddress;
            }

            if (minEarningsE9 !== undefined) {
                localVarQueryParameter['minEarningsE9'] = minEarningsE9;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns performance summary for an affiliate including total referrals, earnings, and rankings.
         * @summary /rewards/affiliate/summary
         * @param {string} userAddress Specify wallet address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateSummary: async (userAddress: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAddress' is not null or undefined
            assertParamExists('getAffiliateSummary', 'userAddress', userAddress)
            const localVarPath = `/v1/rewards/affiliate/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userAddress !== undefined) {
                localVarQueryParameter['userAddress'] = userAddress;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the rewards earned by users for a specific campaign.
         * @summary /rewards/campaign
         * @param {string} campaignName Specify the campaign name
         * @param {string} userAddress Specify wallet address.
         * @param {number} [epochNumber] Optionally specify epoch number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignRewards: async (campaignName: string, userAddress: string, epochNumber?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'campaignName' is not null or undefined
            assertParamExists('getCampaignRewards', 'campaignName', campaignName)
            // verify required parameter 'userAddress' is not null or undefined
            assertParamExists('getCampaignRewards', 'userAddress', userAddress)
            const localVarPath = `/v1/rewards/campaign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (campaignName !== undefined) {
                localVarQueryParameter['campaignName'] = campaignName;
            }

            if (epochNumber !== undefined) {
                localVarQueryParameter['epochNumber'] = epochNumber;
            }

            if (userAddress !== undefined) {
                localVarQueryParameter['userAddress'] = userAddress;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the rewards earned by users for the intervals.
         * @summary /rewards
         * @param {number} [intervalNumber] Optionally specify interval number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewards: async (intervalNumber?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (intervalNumber !== undefined) {
                localVarQueryParameter['intervalNumber'] = intervalNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the metadata for the rewards campaigns.
         * @summary /rewards/metadata/campaign
         * @param {string} [campaignName] Specify the campaign name
         * @param {GetRewardsCampaignMetadataStatusEnum} [status] Optionally specify the status of the campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsCampaignMetadata: async (campaignName?: string, status?: GetRewardsCampaignMetadataStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rewards/metadata/campaign`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (campaignName !== undefined) {
                localVarQueryParameter['campaignName'] = campaignName;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the latest epoch configs for the campaigns.
         * @summary /rewards/metadata/epoch/configs
         * @param {number} [intervalNumber] Specify the interval number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsEpochConfigMetadata: async (intervalNumber?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rewards/metadata/epoch/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (intervalNumber !== undefined) {
                localVarQueryParameter['intervalNumber'] = intervalNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the latest or next epoch epoch for campaign.
         * @summary /rewards/metadata/epoch
         * @param {string} [campaignName] Specify the campaign name
         * @param {GetRewardsEpochMetadataEpochEnum} [epoch] Specify the string \&quot;next\&quot; or \&quot;latest\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsEpochMetadata: async (campaignName?: string, epoch?: GetRewardsEpochMetadataEpochEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rewards/metadata/epoch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (campaignName !== undefined) {
                localVarQueryParameter['campaignName'] = campaignName;
            }

            if (epoch !== undefined) {
                localVarQueryParameter['epoch'] = epoch;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the interval metadata for provided parameters.
         * @summary /rewards/metadata/interval
         * @param {number} [interval] Either specify an interval number or the string \&quot;next\&quot; or \&quot;latest\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsIntervalMetadata: async (interval?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rewards/metadata/interval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the all time rewards earned by users.
         * @summary /rewards/summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsSummary: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/rewards/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit an application to become an affiliate.
         * @summary /rewards/affiliate/onboard
         * @param {OnboardAffiliateRequest} onboardAffiliateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onboardAffiliate: async (onboardAffiliateRequest: OnboardAffiliateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'onboardAffiliateRequest' is not null or undefined
            assertParamExists('onboardAffiliate', 'onboardAffiliateRequest', onboardAffiliateRequest)
            const localVarPath = `/v1/rewards/affiliate/onboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(onboardAffiliateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Onboard a referee with a referral code.
         * @summary /rewards/affiliate/onboard/referee
         * @param {OnboardRefereeRequest} onboardRefereeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onboardReferee: async (onboardRefereeRequest: OnboardRefereeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'onboardRefereeRequest' is not null or undefined
            assertParamExists('onboardReferee', 'onboardRefereeRequest', onboardRefereeRequest)
            const localVarPath = `/v1/rewards/affiliate/onboard/referee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(onboardRefereeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the fee config for an affiliate.
         * @summary /rewards/affiliate/feeConfig
         * @param {UpdateAffiliateFeeConfigRequest} updateAffiliateFeeConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAffiliateFeeConfig: async (updateAffiliateFeeConfigRequest: UpdateAffiliateFeeConfigRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateAffiliateFeeConfigRequest' is not null or undefined
            assertParamExists('updateAffiliateFeeConfig', 'updateAffiliateFeeConfigRequest', updateAffiliateFeeConfigRequest)
            const localVarPath = `/v1/rewards/affiliate/feeConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAffiliateFeeConfigRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RewardsApi - functional programming interface
 * @export
 */
export const RewardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RewardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns detailed earnings breakdown for an affiliate by interval, ordered by interval number in descending order.
         * @summary /rewards/affiliate/intervalOverview
         * @param {string} userAddress The address of the user to get interval overview for
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliateIntervalOverview(userAddress: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAffiliateIntervalOverview200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliateIntervalOverview(userAddress, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getAffiliateIntervalOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns rankings and earnings for affiliates, sorted by the specified category.
         * @summary /rewards/affiliate/leaderDashboard
         * @param {GetAffiliateLeaderDashboardSortByEnum} [sortBy] The category to sort rankings by
         * @param {GetAffiliateLeaderDashboardSortOrderEnum} [sortOrder] The order to sort rankings by
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {string} [search] The name/address of the user to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliateLeaderDashboard(sortBy?: GetAffiliateLeaderDashboardSortByEnum, sortOrder?: GetAffiliateLeaderDashboardSortOrderEnum, page?: number, limit?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAffiliateLeaderDashboard200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliateLeaderDashboard(sortBy, sortOrder, page, limit, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getAffiliateLeaderDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the affiliate metadata.
         * @summary /rewards/affiliate
         * @param {string} userAddress Specify wallet address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliateMetadata(userAddress: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffiliateMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliateMetadata(userAddress, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getAffiliateMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns detailed earnings breakdown for an affiliate users earnings (including perps, spot LP, lending), referral earnings, and total earnings.
         * @summary /rewards/affiliate/overview
         * @param {string} userAddress Specify wallet address.
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {GetAffiliateOverviewSortByEnum} [sortBy] The category to sort earnings by
         * @param {GetAffiliateOverviewSortOrderEnum} [sortOrder] The order to sort earnings by
         * @param {string} [search] The name/address of the user to filter by
         * @param {string} [minEarningsE9] The minimum earnings to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliateOverview(userAddress: string, page?: number, limit?: number, sortBy?: GetAffiliateOverviewSortByEnum, sortOrder?: GetAffiliateOverviewSortOrderEnum, search?: string, minEarningsE9?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAffiliateOverview200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliateOverview(userAddress, page, limit, sortBy, sortOrder, search, minEarningsE9, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getAffiliateOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns performance summary for an affiliate including total referrals, earnings, and rankings.
         * @summary /rewards/affiliate/summary
         * @param {string} userAddress Specify wallet address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAffiliateSummary(userAddress: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffiliateSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAffiliateSummary(userAddress, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getAffiliateSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the rewards earned by users for a specific campaign.
         * @summary /rewards/campaign
         * @param {string} campaignName Specify the campaign name
         * @param {string} userAddress Specify wallet address.
         * @param {number} [epochNumber] Optionally specify epoch number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaignRewards(campaignName: string, userAddress: string, epochNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserCampaignRewards>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignRewards(campaignName, userAddress, epochNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getCampaignRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the rewards earned by users for the intervals.
         * @summary /rewards
         * @param {number} [intervalNumber] Optionally specify interval number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewards(intervalNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IntervalRewards>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewards(intervalNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the metadata for the rewards campaigns.
         * @summary /rewards/metadata/campaign
         * @param {string} [campaignName] Specify the campaign name
         * @param {GetRewardsCampaignMetadataStatusEnum} [status] Optionally specify the status of the campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewardsCampaignMetadata(campaignName?: string, status?: GetRewardsCampaignMetadataStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignMetadata>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewardsCampaignMetadata(campaignName, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getRewardsCampaignMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the latest epoch configs for the campaigns.
         * @summary /rewards/metadata/epoch/configs
         * @param {number} [intervalNumber] Specify the interval number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewardsEpochConfigMetadata(intervalNumber?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpochConfigsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewardsEpochConfigMetadata(intervalNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getRewardsEpochConfigMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the latest or next epoch epoch for campaign.
         * @summary /rewards/metadata/epoch
         * @param {string} [campaignName] Specify the campaign name
         * @param {GetRewardsEpochMetadataEpochEnum} [epoch] Specify the string \&quot;next\&quot; or \&quot;latest\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewardsEpochMetadata(campaignName?: string, epoch?: GetRewardsEpochMetadataEpochEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EpochMetadata>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewardsEpochMetadata(campaignName, epoch, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getRewardsEpochMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the interval metadata for provided parameters.
         * @summary /rewards/metadata/interval
         * @param {number} [interval] Either specify an interval number or the string \&quot;next\&quot; or \&quot;latest\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewardsIntervalMetadata(interval?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IntervalMetadata>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewardsIntervalMetadata(interval, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getRewardsIntervalMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the all time rewards earned by users.
         * @summary /rewards/summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRewardsSummary(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RewardsSummary>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRewardsSummary(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getRewardsSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit an application to become an affiliate.
         * @summary /rewards/affiliate/onboard
         * @param {OnboardAffiliateRequest} onboardAffiliateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async onboardAffiliate(onboardAffiliateRequest: OnboardAffiliateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffiliateOnboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.onboardAffiliate(onboardAffiliateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.onboardAffiliate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Onboard a referee with a referral code.
         * @summary /rewards/affiliate/onboard/referee
         * @param {OnboardRefereeRequest} onboardRefereeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async onboardReferee(onboardRefereeRequest: OnboardRefereeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefereeOnboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.onboardReferee(onboardRefereeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.onboardReferee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the fee config for an affiliate.
         * @summary /rewards/affiliate/feeConfig
         * @param {UpdateAffiliateFeeConfigRequest} updateAffiliateFeeConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAffiliateFeeConfig(updateAffiliateFeeConfigRequest: UpdateAffiliateFeeConfigRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffiliateMetadata>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAffiliateFeeConfig(updateAffiliateFeeConfigRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.updateAffiliateFeeConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RewardsApi - factory interface
 * @export
 */
export const RewardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RewardsApiFp(configuration)
    return {
        /**
         * Returns detailed earnings breakdown for an affiliate by interval, ordered by interval number in descending order.
         * @summary /rewards/affiliate/intervalOverview
         * @param {string} userAddress The address of the user to get interval overview for
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateIntervalOverview(userAddress: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetAffiliateIntervalOverview200Response> {
            return localVarFp.getAffiliateIntervalOverview(userAddress, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns rankings and earnings for affiliates, sorted by the specified category.
         * @summary /rewards/affiliate/leaderDashboard
         * @param {GetAffiliateLeaderDashboardSortByEnum} [sortBy] The category to sort rankings by
         * @param {GetAffiliateLeaderDashboardSortOrderEnum} [sortOrder] The order to sort rankings by
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {string} [search] The name/address of the user to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateLeaderDashboard(sortBy?: GetAffiliateLeaderDashboardSortByEnum, sortOrder?: GetAffiliateLeaderDashboardSortOrderEnum, page?: number, limit?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAffiliateLeaderDashboard200Response> {
            return localVarFp.getAffiliateLeaderDashboard(sortBy, sortOrder, page, limit, search, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the affiliate metadata.
         * @summary /rewards/affiliate
         * @param {string} userAddress Specify wallet address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateMetadata(userAddress: string, options?: RawAxiosRequestConfig): AxiosPromise<AffiliateMetadata> {
            return localVarFp.getAffiliateMetadata(userAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns detailed earnings breakdown for an affiliate users earnings (including perps, spot LP, lending), referral earnings, and total earnings.
         * @summary /rewards/affiliate/overview
         * @param {string} userAddress Specify wallet address.
         * @param {number} [page] The page number to retrieve in a paginated response
         * @param {number} [limit] The page size for pagination
         * @param {GetAffiliateOverviewSortByEnum} [sortBy] The category to sort earnings by
         * @param {GetAffiliateOverviewSortOrderEnum} [sortOrder] The order to sort earnings by
         * @param {string} [search] The name/address of the user to filter by
         * @param {string} [minEarningsE9] The minimum earnings to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateOverview(userAddress: string, page?: number, limit?: number, sortBy?: GetAffiliateOverviewSortByEnum, sortOrder?: GetAffiliateOverviewSortOrderEnum, search?: string, minEarningsE9?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAffiliateOverview200Response> {
            return localVarFp.getAffiliateOverview(userAddress, page, limit, sortBy, sortOrder, search, minEarningsE9, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns performance summary for an affiliate including total referrals, earnings, and rankings.
         * @summary /rewards/affiliate/summary
         * @param {string} userAddress Specify wallet address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffiliateSummary(userAddress: string, options?: RawAxiosRequestConfig): AxiosPromise<AffiliateSummary> {
            return localVarFp.getAffiliateSummary(userAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the rewards earned by users for a specific campaign.
         * @summary /rewards/campaign
         * @param {string} campaignName Specify the campaign name
         * @param {string} userAddress Specify wallet address.
         * @param {number} [epochNumber] Optionally specify epoch number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaignRewards(campaignName: string, userAddress: string, epochNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserCampaignRewards>> {
            return localVarFp.getCampaignRewards(campaignName, userAddress, epochNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the rewards earned by users for the intervals.
         * @summary /rewards
         * @param {number} [intervalNumber] Optionally specify interval number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewards(intervalNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<IntervalRewards>> {
            return localVarFp.getRewards(intervalNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the metadata for the rewards campaigns.
         * @summary /rewards/metadata/campaign
         * @param {string} [campaignName] Specify the campaign name
         * @param {GetRewardsCampaignMetadataStatusEnum} [status] Optionally specify the status of the campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsCampaignMetadata(campaignName?: string, status?: GetRewardsCampaignMetadataStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<CampaignMetadata>> {
            return localVarFp.getRewardsCampaignMetadata(campaignName, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the latest epoch configs for the campaigns.
         * @summary /rewards/metadata/epoch/configs
         * @param {number} [intervalNumber] Specify the interval number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsEpochConfigMetadata(intervalNumber?: number, options?: RawAxiosRequestConfig): AxiosPromise<EpochConfigsResponse> {
            return localVarFp.getRewardsEpochConfigMetadata(intervalNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the latest or next epoch epoch for campaign.
         * @summary /rewards/metadata/epoch
         * @param {string} [campaignName] Specify the campaign name
         * @param {GetRewardsEpochMetadataEpochEnum} [epoch] Specify the string \&quot;next\&quot; or \&quot;latest\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsEpochMetadata(campaignName?: string, epoch?: GetRewardsEpochMetadataEpochEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<EpochMetadata>> {
            return localVarFp.getRewardsEpochMetadata(campaignName, epoch, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the interval metadata for provided parameters.
         * @summary /rewards/metadata/interval
         * @param {number} [interval] Either specify an interval number or the string \&quot;next\&quot; or \&quot;latest\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsIntervalMetadata(interval?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<IntervalMetadata>> {
            return localVarFp.getRewardsIntervalMetadata(interval, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the all time rewards earned by users.
         * @summary /rewards/summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRewardsSummary(options?: RawAxiosRequestConfig): AxiosPromise<Array<RewardsSummary>> {
            return localVarFp.getRewardsSummary(options).then((request) => request(axios, basePath));
        },
        /**
         * Submit an application to become an affiliate.
         * @summary /rewards/affiliate/onboard
         * @param {OnboardAffiliateRequest} onboardAffiliateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onboardAffiliate(onboardAffiliateRequest: OnboardAffiliateRequest, options?: RawAxiosRequestConfig): AxiosPromise<AffiliateOnboardResponse> {
            return localVarFp.onboardAffiliate(onboardAffiliateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Onboard a referee with a referral code.
         * @summary /rewards/affiliate/onboard/referee
         * @param {OnboardRefereeRequest} onboardRefereeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onboardReferee(onboardRefereeRequest: OnboardRefereeRequest, options?: RawAxiosRequestConfig): AxiosPromise<RefereeOnboardResponse> {
            return localVarFp.onboardReferee(onboardRefereeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the fee config for an affiliate.
         * @summary /rewards/affiliate/feeConfig
         * @param {UpdateAffiliateFeeConfigRequest} updateAffiliateFeeConfigRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAffiliateFeeConfig(updateAffiliateFeeConfigRequest: UpdateAffiliateFeeConfigRequest, options?: RawAxiosRequestConfig): AxiosPromise<AffiliateMetadata> {
            return localVarFp.updateAffiliateFeeConfig(updateAffiliateFeeConfigRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RewardsApi - object-oriented interface
 * @export
 * @class RewardsApi
 * @extends {BaseAPI}
 */
export class RewardsApi extends BaseAPI {
    /**
     * Returns detailed earnings breakdown for an affiliate by interval, ordered by interval number in descending order.
     * @summary /rewards/affiliate/intervalOverview
     * @param {string} userAddress The address of the user to get interval overview for
     * @param {number} [page] The page number to retrieve in a paginated response
     * @param {number} [limit] The page size for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getAffiliateIntervalOverview(userAddress: string, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getAffiliateIntervalOverview(userAddress, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns rankings and earnings for affiliates, sorted by the specified category.
     * @summary /rewards/affiliate/leaderDashboard
     * @param {GetAffiliateLeaderDashboardSortByEnum} [sortBy] The category to sort rankings by
     * @param {GetAffiliateLeaderDashboardSortOrderEnum} [sortOrder] The order to sort rankings by
     * @param {number} [page] The page number to retrieve in a paginated response
     * @param {number} [limit] The page size for pagination
     * @param {string} [search] The name/address of the user to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getAffiliateLeaderDashboard(sortBy?: GetAffiliateLeaderDashboardSortByEnum, sortOrder?: GetAffiliateLeaderDashboardSortOrderEnum, page?: number, limit?: number, search?: string, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getAffiliateLeaderDashboard(sortBy, sortOrder, page, limit, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the affiliate metadata.
     * @summary /rewards/affiliate
     * @param {string} userAddress Specify wallet address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getAffiliateMetadata(userAddress: string, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getAffiliateMetadata(userAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns detailed earnings breakdown for an affiliate users earnings (including perps, spot LP, lending), referral earnings, and total earnings.
     * @summary /rewards/affiliate/overview
     * @param {string} userAddress Specify wallet address.
     * @param {number} [page] The page number to retrieve in a paginated response
     * @param {number} [limit] The page size for pagination
     * @param {GetAffiliateOverviewSortByEnum} [sortBy] The category to sort earnings by
     * @param {GetAffiliateOverviewSortOrderEnum} [sortOrder] The order to sort earnings by
     * @param {string} [search] The name/address of the user to filter by
     * @param {string} [minEarningsE9] The minimum earnings to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getAffiliateOverview(userAddress: string, page?: number, limit?: number, sortBy?: GetAffiliateOverviewSortByEnum, sortOrder?: GetAffiliateOverviewSortOrderEnum, search?: string, minEarningsE9?: string, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getAffiliateOverview(userAddress, page, limit, sortBy, sortOrder, search, minEarningsE9, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns performance summary for an affiliate including total referrals, earnings, and rankings.
     * @summary /rewards/affiliate/summary
     * @param {string} userAddress Specify wallet address.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getAffiliateSummary(userAddress: string, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getAffiliateSummary(userAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the rewards earned by users for a specific campaign.
     * @summary /rewards/campaign
     * @param {string} campaignName Specify the campaign name
     * @param {string} userAddress Specify wallet address.
     * @param {number} [epochNumber] Optionally specify epoch number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getCampaignRewards(campaignName: string, userAddress: string, epochNumber?: number, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getCampaignRewards(campaignName, userAddress, epochNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the rewards earned by users for the intervals.
     * @summary /rewards
     * @param {number} [intervalNumber] Optionally specify interval number.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getRewards(intervalNumber?: number, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getRewards(intervalNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the metadata for the rewards campaigns.
     * @summary /rewards/metadata/campaign
     * @param {string} [campaignName] Specify the campaign name
     * @param {GetRewardsCampaignMetadataStatusEnum} [status] Optionally specify the status of the campaigns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getRewardsCampaignMetadata(campaignName?: string, status?: GetRewardsCampaignMetadataStatusEnum, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getRewardsCampaignMetadata(campaignName, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the latest epoch configs for the campaigns.
     * @summary /rewards/metadata/epoch/configs
     * @param {number} [intervalNumber] Specify the interval number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getRewardsEpochConfigMetadata(intervalNumber?: number, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getRewardsEpochConfigMetadata(intervalNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the latest or next epoch epoch for campaign.
     * @summary /rewards/metadata/epoch
     * @param {string} [campaignName] Specify the campaign name
     * @param {GetRewardsEpochMetadataEpochEnum} [epoch] Specify the string \&quot;next\&quot; or \&quot;latest\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getRewardsEpochMetadata(campaignName?: string, epoch?: GetRewardsEpochMetadataEpochEnum, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getRewardsEpochMetadata(campaignName, epoch, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the interval metadata for provided parameters.
     * @summary /rewards/metadata/interval
     * @param {number} [interval] Either specify an interval number or the string \&quot;next\&quot; or \&quot;latest\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getRewardsIntervalMetadata(interval?: number, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getRewardsIntervalMetadata(interval, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the all time rewards earned by users.
     * @summary /rewards/summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getRewardsSummary(options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getRewardsSummary(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit an application to become an affiliate.
     * @summary /rewards/affiliate/onboard
     * @param {OnboardAffiliateRequest} onboardAffiliateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public onboardAffiliate(onboardAffiliateRequest: OnboardAffiliateRequest, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).onboardAffiliate(onboardAffiliateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Onboard a referee with a referral code.
     * @summary /rewards/affiliate/onboard/referee
     * @param {OnboardRefereeRequest} onboardRefereeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public onboardReferee(onboardRefereeRequest: OnboardRefereeRequest, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).onboardReferee(onboardRefereeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the fee config for an affiliate.
     * @summary /rewards/affiliate/feeConfig
     * @param {UpdateAffiliateFeeConfigRequest} updateAffiliateFeeConfigRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public updateAffiliateFeeConfig(updateAffiliateFeeConfigRequest: UpdateAffiliateFeeConfigRequest, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).updateAffiliateFeeConfig(updateAffiliateFeeConfigRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetAffiliateLeaderDashboardSortByEnum = {
    PerpsRank: 'perpsRank',
    LendingRank: 'lendingRank',
    SpotRank: 'spotRank'
} as const;
export type GetAffiliateLeaderDashboardSortByEnum = typeof GetAffiliateLeaderDashboardSortByEnum[keyof typeof GetAffiliateLeaderDashboardSortByEnum];
/**
 * @export
 */
export const GetAffiliateLeaderDashboardSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetAffiliateLeaderDashboardSortOrderEnum = typeof GetAffiliateLeaderDashboardSortOrderEnum[keyof typeof GetAffiliateLeaderDashboardSortOrderEnum];
/**
 * @export
 */
export const GetAffiliateOverviewSortByEnum = {
    RefreeEarnings: 'refreeEarnings',
    ReferralEarnings: 'referralEarnings',
    TotalEarnings: 'totalEarnings'
} as const;
export type GetAffiliateOverviewSortByEnum = typeof GetAffiliateOverviewSortByEnum[keyof typeof GetAffiliateOverviewSortByEnum];
/**
 * @export
 */
export const GetAffiliateOverviewSortOrderEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetAffiliateOverviewSortOrderEnum = typeof GetAffiliateOverviewSortOrderEnum[keyof typeof GetAffiliateOverviewSortOrderEnum];
/**
 * @export
 */
export const GetRewardsCampaignMetadataStatusEnum = {
    Active: 'ACTIVE',
    Inactive: 'INACTIVE'
} as const;
export type GetRewardsCampaignMetadataStatusEnum = typeof GetRewardsCampaignMetadataStatusEnum[keyof typeof GetRewardsCampaignMetadataStatusEnum];
/**
 * @export
 */
export const GetRewardsEpochMetadataEpochEnum = {
    Next: 'next',
    Latest: 'latest'
} as const;
export type GetRewardsEpochMetadataEpochEnum = typeof GetRewardsEpochMetadataEpochEnum[keyof typeof GetRewardsEpochMetadataEpochEnum];
