/* tslint:disable */
/* eslint-disable */
/**
 * Bluefin API
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccountAuthorizationRequest } from '../models';
// @ts-ignore
import type { AccountPositionLeverageUpdateRequest } from '../models';
// @ts-ignore
import type { AdjustIsolatedMarginRequest } from '../models';
// @ts-ignore
import type { CancelOrdersRequest } from '../models';
// @ts-ignore
import type { CancelOrdersResponse } from '../models';
// @ts-ignore
import type { CreateOrderRequest } from '../models';
// @ts-ignore
import type { CreateOrderResponse } from '../models';
// @ts-ignore
import type { OpenOrderResponse } from '../models';
// @ts-ignore
import type { WithdrawRequest } from '../models';
/**
 * TradeApi - axios parameter creator
 * @export
 */
export const TradeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel orders for a market using order hashes. - May be a single order hash or a list of order hashes. - All orders must belong to the same account. - If no order hashes are specified, then will cancel all orders for the given market  - All orders being cancelled by request will receive the same time priority. 
         * @summary /trade/orders/cancel
         * @param {CancelOrdersRequest} cancelOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrders: async (cancelOrdersRequest: CancelOrdersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cancelOrdersRequest' is not null or undefined
            assertParamExists('cancelOrders', 'cancelOrdersRequest', cancelOrdersRequest)
            const localVarPath = `/api/v1/trade/orders/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelOrdersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel orders in standby for a market using order hashes. - May be a single order hash or a list of order hashes. - All orders must belong to the same account. - If no order hashes are specified, then will cancel all orders for the given market - All orders being cancelled by request will receive the same time priority. 
         * @summary /trade/orders/cancel/standby
         * @param {CancelOrdersRequest} cancelOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelStandbyOrders: async (cancelOrdersRequest: CancelOrdersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cancelOrdersRequest' is not null or undefined
            assertParamExists('cancelStandbyOrders', 'cancelOrdersRequest', cancelOrdersRequest)
            const localVarPath = `/api/v1/trade/orders/cancel/standby`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cancelOrdersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of open orders for a specific account.
         * @summary /trade/openOrders
         * @param {string} [symbol] Filter by specific perpetual symbol (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenOrders: async (symbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trade/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of orders in standby for a specific account.
         * @summary /trade/standbyOrders
         * @param {string} [symbol] Filter by specific perpetual symbol (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandbyOrders: async (symbol?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/trade/standbyOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit a new order for execution.
         * @summary /trade/orders
         * @param {CreateOrderRequest} createOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateOrder: async (createOrderRequest: CreateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderRequest' is not null or undefined
            assertParamExists('postCreateOrder', 'createOrderRequest', createOrderRequest)
            const localVarPath = `/api/v1/trade/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates a withdraw action to remove some amount of funds from a user\'s account.
         * @summary /trade/withdraw
         * @param {WithdrawRequest} withdrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWithdraw: async (withdrawRequest: WithdrawRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'withdrawRequest' is not null or undefined
            assertParamExists('postWithdraw', 'withdrawRequest', withdrawRequest)
            const localVarPath = `/api/v1/trade/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(withdrawRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adjust margin for an isolated position on a specific market.
         * @summary /trade/adjustIsolatedMargin
         * @param {AdjustIsolatedMarginRequest} adjustIsolatedMarginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAdjustIsolatedMargin: async (adjustIsolatedMarginRequest: AdjustIsolatedMarginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adjustIsolatedMarginRequest' is not null or undefined
            assertParamExists('putAdjustIsolatedMargin', 'adjustIsolatedMarginRequest', adjustIsolatedMarginRequest)
            const localVarPath = `/api/v1/trade/adjustIsolatedMargin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adjustIsolatedMarginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authorizes an account to trade, perform liquidations and more, on behalf of another account.
         * @summary /trade/accounts/authorize
         * @param {AccountAuthorizationRequest} accountAuthorizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthorizeAccount: async (accountAuthorizationRequest: AccountAuthorizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountAuthorizationRequest' is not null or undefined
            assertParamExists('putAuthorizeAccount', 'accountAuthorizationRequest', accountAuthorizationRequest)
            const localVarPath = `/api/v1/trade/accounts/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountAuthorizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deauthorizes an account to trade, perform liquidations and more, on behalf of another account.
         * @summary /trade/accounts/deauthorize
         * @param {AccountAuthorizationRequest} accountAuthorizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDeauthorizeAccount: async (accountAuthorizationRequest: AccountAuthorizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountAuthorizationRequest' is not null or undefined
            assertParamExists('putDeauthorizeAccount', 'accountAuthorizationRequest', accountAuthorizationRequest)
            const localVarPath = `/api/v1/trade/accounts/deauthorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountAuthorizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates leverage for positions of a given market and closes all open orders for that market.
         * @summary /trade/leverage
         * @param {AccountPositionLeverageUpdateRequest} accountPositionLeverageUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLeverageUpdate: async (accountPositionLeverageUpdateRequest: AccountPositionLeverageUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountPositionLeverageUpdateRequest' is not null or undefined
            assertParamExists('putLeverageUpdate', 'accountPositionLeverageUpdateRequest', accountPositionLeverageUpdateRequest)
            const localVarPath = `/api/v1/trade/leverage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountPositionLeverageUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradeApi - functional programming interface
 * @export
 */
export const TradeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradeApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel orders for a market using order hashes. - May be a single order hash or a list of order hashes. - All orders must belong to the same account. - If no order hashes are specified, then will cancel all orders for the given market  - All orders being cancelled by request will receive the same time priority. 
         * @summary /trade/orders/cancel
         * @param {CancelOrdersRequest} cancelOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrders(cancelOrdersRequest: CancelOrdersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrders(cancelOrdersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.cancelOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Cancel orders in standby for a market using order hashes. - May be a single order hash or a list of order hashes. - All orders must belong to the same account. - If no order hashes are specified, then will cancel all orders for the given market - All orders being cancelled by request will receive the same time priority. 
         * @summary /trade/orders/cancel/standby
         * @param {CancelOrdersRequest} cancelOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelStandbyOrders(cancelOrdersRequest: CancelOrdersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelStandbyOrders(cancelOrdersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.cancelStandbyOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details of open orders for a specific account.
         * @summary /trade/openOrders
         * @param {string} [symbol] Filter by specific perpetual symbol (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOpenOrders(symbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpenOrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOpenOrders(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.getOpenOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details of orders in standby for a specific account.
         * @summary /trade/standbyOrders
         * @param {string} [symbol] Filter by specific perpetual symbol (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStandbyOrders(symbol?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpenOrderResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStandbyOrders(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.getStandbyOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Submit a new order for execution.
         * @summary /trade/orders
         * @param {CreateOrderRequest} createOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateOrder(createOrderRequest: CreateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateOrder(createOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.postCreateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Initiates a withdraw action to remove some amount of funds from a user\'s account.
         * @summary /trade/withdraw
         * @param {WithdrawRequest} withdrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWithdraw(withdrawRequest: WithdrawRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postWithdraw(withdrawRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.postWithdraw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Adjust margin for an isolated position on a specific market.
         * @summary /trade/adjustIsolatedMargin
         * @param {AdjustIsolatedMarginRequest} adjustIsolatedMarginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAdjustIsolatedMargin(adjustIsolatedMarginRequest: AdjustIsolatedMarginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAdjustIsolatedMargin(adjustIsolatedMarginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.putAdjustIsolatedMargin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Authorizes an account to trade, perform liquidations and more, on behalf of another account.
         * @summary /trade/accounts/authorize
         * @param {AccountAuthorizationRequest} accountAuthorizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAuthorizeAccount(accountAuthorizationRequest: AccountAuthorizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAuthorizeAccount(accountAuthorizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.putAuthorizeAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deauthorizes an account to trade, perform liquidations and more, on behalf of another account.
         * @summary /trade/accounts/deauthorize
         * @param {AccountAuthorizationRequest} accountAuthorizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDeauthorizeAccount(accountAuthorizationRequest: AccountAuthorizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putDeauthorizeAccount(accountAuthorizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.putDeauthorizeAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates leverage for positions of a given market and closes all open orders for that market.
         * @summary /trade/leverage
         * @param {AccountPositionLeverageUpdateRequest} accountPositionLeverageUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLeverageUpdate(accountPositionLeverageUpdateRequest: AccountPositionLeverageUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putLeverageUpdate(accountPositionLeverageUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeApi.putLeverageUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TradeApi - factory interface
 * @export
 */
export const TradeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradeApiFp(configuration)
    return {
        /**
         * Cancel orders for a market using order hashes. - May be a single order hash or a list of order hashes. - All orders must belong to the same account. - If no order hashes are specified, then will cancel all orders for the given market  - All orders being cancelled by request will receive the same time priority. 
         * @summary /trade/orders/cancel
         * @param {CancelOrdersRequest} cancelOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrders(cancelOrdersRequest: CancelOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelOrders(cancelOrdersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel orders in standby for a market using order hashes. - May be a single order hash or a list of order hashes. - All orders must belong to the same account. - If no order hashes are specified, then will cancel all orders for the given market - All orders being cancelled by request will receive the same time priority. 
         * @summary /trade/orders/cancel/standby
         * @param {CancelOrdersRequest} cancelOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelStandbyOrders(cancelOrdersRequest: CancelOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelOrdersResponse> {
            return localVarFp.cancelStandbyOrders(cancelOrdersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of open orders for a specific account.
         * @summary /trade/openOrders
         * @param {string} [symbol] Filter by specific perpetual symbol (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOpenOrders(symbol?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<OpenOrderResponse>> {
            return localVarFp.getOpenOrders(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of orders in standby for a specific account.
         * @summary /trade/standbyOrders
         * @param {string} [symbol] Filter by specific perpetual symbol (optional)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandbyOrders(symbol?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<OpenOrderResponse>> {
            return localVarFp.getStandbyOrders(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit a new order for execution.
         * @summary /trade/orders
         * @param {CreateOrderRequest} createOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateOrder(createOrderRequest: CreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateOrderResponse> {
            return localVarFp.postCreateOrder(createOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates a withdraw action to remove some amount of funds from a user\'s account.
         * @summary /trade/withdraw
         * @param {WithdrawRequest} withdrawRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWithdraw(withdrawRequest: WithdrawRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postWithdraw(withdrawRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Adjust margin for an isolated position on a specific market.
         * @summary /trade/adjustIsolatedMargin
         * @param {AdjustIsolatedMarginRequest} adjustIsolatedMarginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAdjustIsolatedMargin(adjustIsolatedMarginRequest: AdjustIsolatedMarginRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putAdjustIsolatedMargin(adjustIsolatedMarginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Authorizes an account to trade, perform liquidations and more, on behalf of another account.
         * @summary /trade/accounts/authorize
         * @param {AccountAuthorizationRequest} accountAuthorizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAuthorizeAccount(accountAuthorizationRequest: AccountAuthorizationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putAuthorizeAccount(accountAuthorizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deauthorizes an account to trade, perform liquidations and more, on behalf of another account.
         * @summary /trade/accounts/deauthorize
         * @param {AccountAuthorizationRequest} accountAuthorizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDeauthorizeAccount(accountAuthorizationRequest: AccountAuthorizationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putDeauthorizeAccount(accountAuthorizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates leverage for positions of a given market and closes all open orders for that market.
         * @summary /trade/leverage
         * @param {AccountPositionLeverageUpdateRequest} accountPositionLeverageUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLeverageUpdate(accountPositionLeverageUpdateRequest: AccountPositionLeverageUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putLeverageUpdate(accountPositionLeverageUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TradeApi - object-oriented interface
 * @export
 * @class TradeApi
 * @extends {BaseAPI}
 */
export class TradeApi extends BaseAPI {
    /**
     * Cancel orders for a market using order hashes. - May be a single order hash or a list of order hashes. - All orders must belong to the same account. - If no order hashes are specified, then will cancel all orders for the given market  - All orders being cancelled by request will receive the same time priority. 
     * @summary /trade/orders/cancel
     * @param {CancelOrdersRequest} cancelOrdersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public cancelOrders(cancelOrdersRequest: CancelOrdersRequest, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).cancelOrders(cancelOrdersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel orders in standby for a market using order hashes. - May be a single order hash or a list of order hashes. - All orders must belong to the same account. - If no order hashes are specified, then will cancel all orders for the given market - All orders being cancelled by request will receive the same time priority. 
     * @summary /trade/orders/cancel/standby
     * @param {CancelOrdersRequest} cancelOrdersRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public cancelStandbyOrders(cancelOrdersRequest: CancelOrdersRequest, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).cancelStandbyOrders(cancelOrdersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of open orders for a specific account.
     * @summary /trade/openOrders
     * @param {string} [symbol] Filter by specific perpetual symbol (optional)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public getOpenOrders(symbol?: string, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).getOpenOrders(symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of orders in standby for a specific account.
     * @summary /trade/standbyOrders
     * @param {string} [symbol] Filter by specific perpetual symbol (optional)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public getStandbyOrders(symbol?: string, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).getStandbyOrders(symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit a new order for execution.
     * @summary /trade/orders
     * @param {CreateOrderRequest} createOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public postCreateOrder(createOrderRequest: CreateOrderRequest, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).postCreateOrder(createOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates a withdraw action to remove some amount of funds from a user\'s account.
     * @summary /trade/withdraw
     * @param {WithdrawRequest} withdrawRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public postWithdraw(withdrawRequest: WithdrawRequest, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).postWithdraw(withdrawRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adjust margin for an isolated position on a specific market.
     * @summary /trade/adjustIsolatedMargin
     * @param {AdjustIsolatedMarginRequest} adjustIsolatedMarginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public putAdjustIsolatedMargin(adjustIsolatedMarginRequest: AdjustIsolatedMarginRequest, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).putAdjustIsolatedMargin(adjustIsolatedMarginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authorizes an account to trade, perform liquidations and more, on behalf of another account.
     * @summary /trade/accounts/authorize
     * @param {AccountAuthorizationRequest} accountAuthorizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public putAuthorizeAccount(accountAuthorizationRequest: AccountAuthorizationRequest, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).putAuthorizeAccount(accountAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deauthorizes an account to trade, perform liquidations and more, on behalf of another account.
     * @summary /trade/accounts/deauthorize
     * @param {AccountAuthorizationRequest} accountAuthorizationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public putDeauthorizeAccount(accountAuthorizationRequest: AccountAuthorizationRequest, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).putDeauthorizeAccount(accountAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates leverage for positions of a given market and closes all open orders for that market.
     * @summary /trade/leverage
     * @param {AccountPositionLeverageUpdateRequest} accountPositionLeverageUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeApi
     */
    public putLeverageUpdate(accountPositionLeverageUpdateRequest: AccountPositionLeverageUpdateRequest, options?: RawAxiosRequestConfig) {
        return TradeApiFp(this.configuration).putLeverageUpdate(accountPositionLeverageUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

