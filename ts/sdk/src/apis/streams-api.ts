/* tslint:disable */
/* eslint-disable */
/**
 * Bluefin API
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * StreamsApi - axios parameter creator
 * @export
 */
export const StreamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * WebSocket Account Streams URL.
         * @param {string} authorization 
         * @param {WebSocketAccountDataUpgradeEnum} upgrade 
         * @param {string} secWebSocketKey WebSocket key used during the handshake.
         * @param {WebSocketAccountDataSecWebSocketVersionEnum} secWebSocketVersion WebSocket protocol version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webSocketAccountData: async (authorization: string, upgrade: WebSocketAccountDataUpgradeEnum, secWebSocketKey: string, secWebSocketVersion: WebSocketAccountDataSecWebSocketVersionEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('webSocketAccountData', 'authorization', authorization)
            // verify required parameter 'upgrade' is not null or undefined
            assertParamExists('webSocketAccountData', 'upgrade', upgrade)
            // verify required parameter 'secWebSocketKey' is not null or undefined
            assertParamExists('webSocketAccountData', 'secWebSocketKey', secWebSocketKey)
            // verify required parameter 'secWebSocketVersion' is not null or undefined
            assertParamExists('webSocketAccountData', 'secWebSocketVersion', secWebSocketVersion)
            const localVarPath = `/ws/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (upgrade != null) {
                localVarHeaderParameter['Upgrade'] = String(upgrade);
            }
            if (secWebSocketKey != null) {
                localVarHeaderParameter['Sec-WebSocket-Key'] = String(secWebSocketKey);
            }
            if (secWebSocketVersion != null) {
                localVarHeaderParameter['Sec-WebSocket-Version'] = String(secWebSocketVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * WebSocket Market Streams URL.
         * @param {WebSocketMarketDataUpgradeEnum} upgrade 
         * @param {string} secWebSocketKey WebSocket key used during the handshake.
         * @param {WebSocketMarketDataSecWebSocketVersionEnum} secWebSocketVersion WebSocket protocol version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webSocketMarketData: async (upgrade: WebSocketMarketDataUpgradeEnum, secWebSocketKey: string, secWebSocketVersion: WebSocketMarketDataSecWebSocketVersionEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upgrade' is not null or undefined
            assertParamExists('webSocketMarketData', 'upgrade', upgrade)
            // verify required parameter 'secWebSocketKey' is not null or undefined
            assertParamExists('webSocketMarketData', 'secWebSocketKey', secWebSocketKey)
            // verify required parameter 'secWebSocketVersion' is not null or undefined
            assertParamExists('webSocketMarketData', 'secWebSocketVersion', secWebSocketVersion)
            const localVarPath = `/ws/market`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (upgrade != null) {
                localVarHeaderParameter['Upgrade'] = String(upgrade);
            }
            if (secWebSocketKey != null) {
                localVarHeaderParameter['Sec-WebSocket-Key'] = String(secWebSocketKey);
            }
            if (secWebSocketVersion != null) {
                localVarHeaderParameter['Sec-WebSocket-Version'] = String(secWebSocketVersion);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StreamsApi - functional programming interface
 * @export
 */
export const StreamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StreamsApiAxiosParamCreator(configuration)
    return {
        /**
         * WebSocket Account Streams URL.
         * @param {string} authorization 
         * @param {WebSocketAccountDataUpgradeEnum} upgrade 
         * @param {string} secWebSocketKey WebSocket key used during the handshake.
         * @param {WebSocketAccountDataSecWebSocketVersionEnum} secWebSocketVersion WebSocket protocol version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webSocketAccountData(authorization: string, upgrade: WebSocketAccountDataUpgradeEnum, secWebSocketKey: string, secWebSocketVersion: WebSocketAccountDataSecWebSocketVersionEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webSocketAccountData(authorization, upgrade, secWebSocketKey, secWebSocketVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamsApi.webSocketAccountData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * WebSocket Market Streams URL.
         * @param {WebSocketMarketDataUpgradeEnum} upgrade 
         * @param {string} secWebSocketKey WebSocket key used during the handshake.
         * @param {WebSocketMarketDataSecWebSocketVersionEnum} secWebSocketVersion WebSocket protocol version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webSocketMarketData(upgrade: WebSocketMarketDataUpgradeEnum, secWebSocketKey: string, secWebSocketVersion: WebSocketMarketDataSecWebSocketVersionEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webSocketMarketData(upgrade, secWebSocketKey, secWebSocketVersion, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StreamsApi.webSocketMarketData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StreamsApi - factory interface
 * @export
 */
export const StreamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StreamsApiFp(configuration)
    return {
        /**
         * WebSocket Account Streams URL.
         * @param {string} authorization 
         * @param {WebSocketAccountDataUpgradeEnum} upgrade 
         * @param {string} secWebSocketKey WebSocket key used during the handshake.
         * @param {WebSocketAccountDataSecWebSocketVersionEnum} secWebSocketVersion WebSocket protocol version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webSocketAccountData(authorization: string, upgrade: WebSocketAccountDataUpgradeEnum, secWebSocketKey: string, secWebSocketVersion: WebSocketAccountDataSecWebSocketVersionEnum, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.webSocketAccountData(authorization, upgrade, secWebSocketKey, secWebSocketVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * WebSocket Market Streams URL.
         * @param {WebSocketMarketDataUpgradeEnum} upgrade 
         * @param {string} secWebSocketKey WebSocket key used during the handshake.
         * @param {WebSocketMarketDataSecWebSocketVersionEnum} secWebSocketVersion WebSocket protocol version.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webSocketMarketData(upgrade: WebSocketMarketDataUpgradeEnum, secWebSocketKey: string, secWebSocketVersion: WebSocketMarketDataSecWebSocketVersionEnum, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.webSocketMarketData(upgrade, secWebSocketKey, secWebSocketVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StreamsApi - object-oriented interface
 * @export
 * @class StreamsApi
 * @extends {BaseAPI}
 */
export class StreamsApi extends BaseAPI {
    /**
     * WebSocket Account Streams URL.
     * @param {string} authorization 
     * @param {WebSocketAccountDataUpgradeEnum} upgrade 
     * @param {string} secWebSocketKey WebSocket key used during the handshake.
     * @param {WebSocketAccountDataSecWebSocketVersionEnum} secWebSocketVersion WebSocket protocol version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApi
     */
    public webSocketAccountData(authorization: string, upgrade: WebSocketAccountDataUpgradeEnum, secWebSocketKey: string, secWebSocketVersion: WebSocketAccountDataSecWebSocketVersionEnum, options?: RawAxiosRequestConfig) {
        return StreamsApiFp(this.configuration).webSocketAccountData(authorization, upgrade, secWebSocketKey, secWebSocketVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * WebSocket Market Streams URL.
     * @param {WebSocketMarketDataUpgradeEnum} upgrade 
     * @param {string} secWebSocketKey WebSocket key used during the handshake.
     * @param {WebSocketMarketDataSecWebSocketVersionEnum} secWebSocketVersion WebSocket protocol version.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StreamsApi
     */
    public webSocketMarketData(upgrade: WebSocketMarketDataUpgradeEnum, secWebSocketKey: string, secWebSocketVersion: WebSocketMarketDataSecWebSocketVersionEnum, options?: RawAxiosRequestConfig) {
        return StreamsApiFp(this.configuration).webSocketMarketData(upgrade, secWebSocketKey, secWebSocketVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const WebSocketAccountDataUpgradeEnum = {
    Websocket: 'websocket'
} as const;
export type WebSocketAccountDataUpgradeEnum = typeof WebSocketAccountDataUpgradeEnum[keyof typeof WebSocketAccountDataUpgradeEnum];
/**
 * @export
 */
export const WebSocketAccountDataSecWebSocketVersionEnum = {
    _13: '13'
} as const;
export type WebSocketAccountDataSecWebSocketVersionEnum = typeof WebSocketAccountDataSecWebSocketVersionEnum[keyof typeof WebSocketAccountDataSecWebSocketVersionEnum];
/**
 * @export
 */
export const WebSocketMarketDataUpgradeEnum = {
    Websocket: 'websocket'
} as const;
export type WebSocketMarketDataUpgradeEnum = typeof WebSocketMarketDataUpgradeEnum[keyof typeof WebSocketMarketDataUpgradeEnum];
/**
 * @export
 */
export const WebSocketMarketDataSecWebSocketVersionEnum = {
    _13: '13'
} as const;
export type WebSocketMarketDataSecWebSocketVersionEnum = typeof WebSocketMarketDataSecWebSocketVersionEnum[keyof typeof WebSocketMarketDataSecWebSocketVersionEnum];
