/* tslint:disable */
/* eslint-disable */
/**
 * Bluefin API
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Account } from '../models';
// @ts-ignore
import type { AccountFundingRateHistory } from '../models';
// @ts-ignore
import type { AccountPreference } from '../models';
// @ts-ignore
import type { SponsorTxRequest } from '../models';
// @ts-ignore
import type { SponsorTxResponse } from '../models';
// @ts-ignore
import type { Trade } from '../models';
// @ts-ignore
import type { TradeType } from '../models';
// @ts-ignore
import type { Transaction } from '../models';
// @ts-ignore
import type { TransactionType } from '../models';
// @ts-ignore
import type { UpdateAccountPreferenceRequest } from '../models';
/**
 * AccountDataApi - axios parameter creator
 * @export
 */
export const AccountDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the user\'s account details.
         * @summary /account
         * @param {string} [accountAddress] Account address to fetch account details by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountDetails: async (accountAddress?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountAddress !== undefined) {
                localVarQueryParameter['accountAddress'] = accountAddress;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the funding rate history for a specific account.
         * @summary /account/fundingRateHistory
         * @param {string} [accountAddress] Account address to filter funding rate history by.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFundingRateHistory: async (accountAddress?: string, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/account/fundingRateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (accountAddress !== undefined) {
                localVarQueryParameter['accountAddress'] = accountAddress;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the user\'s account preferences.
         * @summary /account/preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPreferences: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/account/preferences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the user\'s trade history.
         * @summary /account/trades
         * @param {string} [symbol] Market address to filter trades by. If not specified, returns trades for all markets.
         * @param {number} [startTimeAtMillis] Start time in milliseconds. Defaults to 7 days ago if not specified.
         * @param {number} [endTimeAtMillis] End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
         * @param {number} [limit] Default 500; max 1000.
         * @param {TradeType} [tradeType] Type of trade. By default returns all. UNSPECIFIED returns all.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTrades: async (symbol?: string, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, tradeType?: TradeType, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/account/trades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (startTimeAtMillis !== undefined) {
                localVarQueryParameter['startTimeAtMillis'] = startTimeAtMillis;
            }

            if (endTimeAtMillis !== undefined) {
                localVarQueryParameter['endTimeAtMillis'] = endTimeAtMillis;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tradeType !== undefined) {
                localVarQueryParameter['tradeType'] = tradeType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the user\'s transaction history (any change in balance).
         * @summary /account/transactions
         * @param {Array<TransactionType>} [types] Optional query parameter to filter transactions by type.
         * @param {string} [assetSymbol] Optional query parameter to filter transactions by asset bank address.
         * @param {number} [startTimeAtMillis] Start time in milliseconds. Defaults to 7 days ago if not specified.
         * @param {number} [endTimeAtMillis] End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactionHistory: async (types?: Array<TransactionType>, assetSymbol?: string, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/account/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (types) {
                localVarQueryParameter['types'] = types;
            }

            if (assetSymbol !== undefined) {
                localVarQueryParameter['assetSymbol'] = assetSymbol;
            }

            if (startTimeAtMillis !== undefined) {
                localVarQueryParameter['startTimeAtMillis'] = startTimeAtMillis;
            }

            if (endTimeAtMillis !== undefined) {
                localVarQueryParameter['endTimeAtMillis'] = endTimeAtMillis;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user\'s account preferences. This will overwrite the preferences, so always send the full object.
         * @summary /account/preferences
         * @param {UpdateAccountPreferenceRequest} updateAccountPreferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccountPreferences: async (updateAccountPreferenceRequest: UpdateAccountPreferenceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateAccountPreferenceRequest' is not null or undefined
            assertParamExists('putAccountPreferences', 'updateAccountPreferenceRequest', updateAccountPreferenceRequest)
            const localVarPath = `/api/v1/account/preferences`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAccountPreferenceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sponsors a transaction if it\'s eligible for sponsorship based on allowlisted methods and kinds.
         * @summary /account/sponsorTx
         * @param {SponsorTxRequest} sponsorTxRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorTx: async (sponsorTxRequest: SponsorTxRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sponsorTxRequest' is not null or undefined
            assertParamExists('sponsorTx', 'sponsorTxRequest', sponsorTxRequest)
            const localVarPath = `/api/v1/account/sponsorTx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sponsorTxRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountDataApi - functional programming interface
 * @export
 */
export const AccountDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the user\'s account details.
         * @summary /account
         * @param {string} [accountAddress] Account address to fetch account details by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountDetails(accountAddress?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountDetails(accountAddress, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountDataApi.getAccountDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the funding rate history for a specific account.
         * @summary /account/fundingRateHistory
         * @param {string} [accountAddress] Account address to filter funding rate history by.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountFundingRateHistory(accountAddress?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountFundingRateHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountFundingRateHistory(accountAddress, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountDataApi.getAccountFundingRateHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the user\'s account preferences.
         * @summary /account/preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountPreferences(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountPreference>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountPreferences(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountDataApi.getAccountPreferences']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the user\'s trade history.
         * @summary /account/trades
         * @param {string} [symbol] Market address to filter trades by. If not specified, returns trades for all markets.
         * @param {number} [startTimeAtMillis] Start time in milliseconds. Defaults to 7 days ago if not specified.
         * @param {number} [endTimeAtMillis] End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
         * @param {number} [limit] Default 500; max 1000.
         * @param {TradeType} [tradeType] Type of trade. By default returns all. UNSPECIFIED returns all.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountTrades(symbol?: string, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, tradeType?: TradeType, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountTrades(symbol, startTimeAtMillis, endTimeAtMillis, limit, tradeType, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountDataApi.getAccountTrades']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the user\'s transaction history (any change in balance).
         * @summary /account/transactions
         * @param {Array<TransactionType>} [types] Optional query parameter to filter transactions by type.
         * @param {string} [assetSymbol] Optional query parameter to filter transactions by asset bank address.
         * @param {number} [startTimeAtMillis] Start time in milliseconds. Defaults to 7 days ago if not specified.
         * @param {number} [endTimeAtMillis] End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountTransactionHistory(types?: Array<TransactionType>, assetSymbol?: string, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountTransactionHistory(types, assetSymbol, startTimeAtMillis, endTimeAtMillis, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountDataApi.getAccountTransactionHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update user\'s account preferences. This will overwrite the preferences, so always send the full object.
         * @summary /account/preferences
         * @param {UpdateAccountPreferenceRequest} updateAccountPreferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAccountPreferences(updateAccountPreferenceRequest: UpdateAccountPreferenceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAccountPreferences(updateAccountPreferenceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountDataApi.putAccountPreferences']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sponsors a transaction if it\'s eligible for sponsorship based on allowlisted methods and kinds.
         * @summary /account/sponsorTx
         * @param {SponsorTxRequest} sponsorTxRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sponsorTx(sponsorTxRequest: SponsorTxRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SponsorTxResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sponsorTx(sponsorTxRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountDataApi.sponsorTx']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountDataApi - factory interface
 * @export
 */
export const AccountDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountDataApiFp(configuration)
    return {
        /**
         * Retrieves the user\'s account details.
         * @summary /account
         * @param {string} [accountAddress] Account address to fetch account details by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountDetails(accountAddress?: string, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.getAccountDetails(accountAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the funding rate history for a specific account.
         * @summary /account/fundingRateHistory
         * @param {string} [accountAddress] Account address to filter funding rate history by.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountFundingRateHistory(accountAddress?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<AccountFundingRateHistory> {
            return localVarFp.getAccountFundingRateHistory(accountAddress, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the user\'s account preferences.
         * @summary /account/preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountPreferences(options?: RawAxiosRequestConfig): AxiosPromise<AccountPreference> {
            return localVarFp.getAccountPreferences(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the user\'s trade history.
         * @summary /account/trades
         * @param {string} [symbol] Market address to filter trades by. If not specified, returns trades for all markets.
         * @param {number} [startTimeAtMillis] Start time in milliseconds. Defaults to 7 days ago if not specified.
         * @param {number} [endTimeAtMillis] End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
         * @param {number} [limit] Default 500; max 1000.
         * @param {TradeType} [tradeType] Type of trade. By default returns all. UNSPECIFIED returns all.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTrades(symbol?: string, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, tradeType?: TradeType, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Trade>> {
            return localVarFp.getAccountTrades(symbol, startTimeAtMillis, endTimeAtMillis, limit, tradeType, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the user\'s transaction history (any change in balance).
         * @summary /account/transactions
         * @param {Array<TransactionType>} [types] Optional query parameter to filter transactions by type.
         * @param {string} [assetSymbol] Optional query parameter to filter transactions by asset bank address.
         * @param {number} [startTimeAtMillis] Start time in milliseconds. Defaults to 7 days ago if not specified.
         * @param {number} [endTimeAtMillis] End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountTransactionHistory(types?: Array<TransactionType>, assetSymbol?: string, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Transaction>> {
            return localVarFp.getAccountTransactionHistory(types, assetSymbol, startTimeAtMillis, endTimeAtMillis, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user\'s account preferences. This will overwrite the preferences, so always send the full object.
         * @summary /account/preferences
         * @param {UpdateAccountPreferenceRequest} updateAccountPreferenceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAccountPreferences(updateAccountPreferenceRequest: UpdateAccountPreferenceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.putAccountPreferences(updateAccountPreferenceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sponsors a transaction if it\'s eligible for sponsorship based on allowlisted methods and kinds.
         * @summary /account/sponsorTx
         * @param {SponsorTxRequest} sponsorTxRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sponsorTx(sponsorTxRequest: SponsorTxRequest, options?: RawAxiosRequestConfig): AxiosPromise<SponsorTxResponse> {
            return localVarFp.sponsorTx(sponsorTxRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountDataApi - object-oriented interface
 * @export
 * @class AccountDataApi
 * @extends {BaseAPI}
 */
export class AccountDataApi extends BaseAPI {
    /**
     * Retrieves the user\'s account details.
     * @summary /account
     * @param {string} [accountAddress] Account address to fetch account details by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDataApi
     */
    public getAccountDetails(accountAddress?: string, options?: RawAxiosRequestConfig) {
        return AccountDataApiFp(this.configuration).getAccountDetails(accountAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the funding rate history for a specific account.
     * @summary /account/fundingRateHistory
     * @param {string} [accountAddress] Account address to filter funding rate history by.
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [page] The page number to retrieve in a paginated response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDataApi
     */
    public getAccountFundingRateHistory(accountAddress?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return AccountDataApiFp(this.configuration).getAccountFundingRateHistory(accountAddress, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the user\'s account preferences.
     * @summary /account/preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDataApi
     */
    public getAccountPreferences(options?: RawAxiosRequestConfig) {
        return AccountDataApiFp(this.configuration).getAccountPreferences(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the user\'s trade history.
     * @summary /account/trades
     * @param {string} [symbol] Market address to filter trades by. If not specified, returns trades for all markets.
     * @param {number} [startTimeAtMillis] Start time in milliseconds. Defaults to 7 days ago if not specified.
     * @param {number} [endTimeAtMillis] End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
     * @param {number} [limit] Default 500; max 1000.
     * @param {TradeType} [tradeType] Type of trade. By default returns all. UNSPECIFIED returns all.
     * @param {number} [page] The page number to retrieve in a paginated response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDataApi
     */
    public getAccountTrades(symbol?: string, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, tradeType?: TradeType, page?: number, options?: RawAxiosRequestConfig) {
        return AccountDataApiFp(this.configuration).getAccountTrades(symbol, startTimeAtMillis, endTimeAtMillis, limit, tradeType, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the user\'s transaction history (any change in balance).
     * @summary /account/transactions
     * @param {Array<TransactionType>} [types] Optional query parameter to filter transactions by type.
     * @param {string} [assetSymbol] Optional query parameter to filter transactions by asset bank address.
     * @param {number} [startTimeAtMillis] Start time in milliseconds. Defaults to 7 days ago if not specified.
     * @param {number} [endTimeAtMillis] End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [page] The page number to retrieve in a paginated response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDataApi
     */
    public getAccountTransactionHistory(types?: Array<TransactionType>, assetSymbol?: string, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return AccountDataApiFp(this.configuration).getAccountTransactionHistory(types, assetSymbol, startTimeAtMillis, endTimeAtMillis, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user\'s account preferences. This will overwrite the preferences, so always send the full object.
     * @summary /account/preferences
     * @param {UpdateAccountPreferenceRequest} updateAccountPreferenceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDataApi
     */
    public putAccountPreferences(updateAccountPreferenceRequest: UpdateAccountPreferenceRequest, options?: RawAxiosRequestConfig) {
        return AccountDataApiFp(this.configuration).putAccountPreferences(updateAccountPreferenceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sponsors a transaction if it\'s eligible for sponsorship based on allowlisted methods and kinds.
     * @summary /account/sponsorTx
     * @param {SponsorTxRequest} sponsorTxRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountDataApi
     */
    public sponsorTx(sponsorTxRequest: SponsorTxRequest, options?: RawAxiosRequestConfig) {
        return AccountDataApiFp(this.configuration).sponsorTx(sponsorTxRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

