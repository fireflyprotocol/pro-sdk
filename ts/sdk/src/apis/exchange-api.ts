/* tslint:disable */
/* eslint-disable */
/**
 * Bluefin API
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CandlePriceType } from '../models';
// @ts-ignore
import type { ExchangeInfoResponse } from '../models';
// @ts-ignore
import type { FundingRateEntry } from '../models';
// @ts-ignore
import type { KlineInterval } from '../models';
// @ts-ignore
import type { OrderbookDepthResponse } from '../models';
// @ts-ignore
import type { StatsInterval } from '../models';
// @ts-ignore
import type { StatsResponse } from '../models';
// @ts-ignore
import type { TickerResponse } from '../models';
// @ts-ignore
import type { Trade } from '../models';
// @ts-ignore
import type { TradeType } from '../models';
/**
 * ExchangeApi - axios parameter creator
 * @export
 */
export const ExchangeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves all market ticker information.
         * @summary /exchange/tickers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarketTicker: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/exchange/tickers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves candle stick data for a market.
         * @summary /exchange/candlesticks
         * @param {string} symbol The market symbol to get the klines for.
         * @param {KlineInterval} interval The interval to get the klines for.
         * @param {CandlePriceType} type Candle price type (last price, market price or oracle).
         * @param {number} [startTimeAtMillis] Timestamp in milliseconds in ms to get klines from.
         * @param {number} [endTimeAtMillis] Timestamp in milliseconds in ms to get klines until.
         * @param {number} [limit] Default 50; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandlestickData: async (symbol: string, interval: KlineInterval, type: CandlePriceType, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getCandlestickData', 'symbol', symbol)
            // verify required parameter 'interval' is not null or undefined
            assertParamExists('getCandlestickData', 'interval', interval)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getCandlestickData', 'type', type)
            const localVarPath = `/v1/exchange/candlesticks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTimeAtMillis !== undefined) {
                localVarQueryParameter['startTimeAtMillis'] = startTimeAtMillis;
            }

            if (endTimeAtMillis !== undefined) {
                localVarQueryParameter['endTimeAtMillis'] = endTimeAtMillis;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the current exchange information including available margin assets, markets, and rules.
         * @summary /exchange/info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/exchange/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves exchange statistics.
         * @summary /exchange/stats
         * @param {StatsInterval} [interval] 
         * @param {number} [startTimeAtMillis] Timestamp in milliseconds.
         * @param {number} [endTimeAtMillis] Timestamp in milliseconds.
         * @param {number} [limit] Number of records to return. Default is 30; max is 200.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeStats: async (interval?: StatsInterval, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/exchange/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (interval !== undefined) {
                localVarQueryParameter['interval'] = interval;
            }

            if (startTimeAtMillis !== undefined) {
                localVarQueryParameter['startTimeAtMillis'] = startTimeAtMillis;
            }

            if (endTimeAtMillis !== undefined) {
                localVarQueryParameter['endTimeAtMillis'] = endTimeAtMillis;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the funding rate history for a specific market address.
         * @summary /exchange/fundingRateHistory
         * @param {string} symbol The market symbol to get funding rate history for
         * @param {number} [limit] Number of records to return. Default is 100; max is 1000.
         * @param {number} [startTimeAtMillis] The timestamp specifies the earliest point in time for which data should be returned. The value is not included.
         * @param {number} [endTimeAtMillis] The timestamp specifies the latest point in time for which data should be returned. The value is included.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundingRateHistory: async (symbol: string, limit?: number, startTimeAtMillis?: number, endTimeAtMillis?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getFundingRateHistory', 'symbol', symbol)
            const localVarPath = `/v1/exchange/fundingRateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startTimeAtMillis !== undefined) {
                localVarQueryParameter['startTimeAtMillis'] = startTimeAtMillis;
            }

            if (endTimeAtMillis !== undefined) {
                localVarQueryParameter['endTimeAtMillis'] = endTimeAtMillis;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves aggregated ticker data for a market.
         * @summary /exchange/ticker
         * @param {string} symbol Market symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketTicker: async (symbol: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getMarketTicker', 'symbol', symbol)
            const localVarPath = `/v1/exchange/ticker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the current state of the orderbook.
         * @summary /exchange/depth
         * @param {string} symbol Market symbol to get the orderbook depth for.
         * @param {number} [limit] Maximum number of bids and asks to return. Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderbookDepth: async (symbol: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getOrderbookDepth', 'symbol', symbol)
            const localVarPath = `/v1/exchange/depth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves recent trades executed on a market.
         * @summary /exchange/trades
         * @param {string} symbol The market symbol to get the trades for.
         * @param {TradeType} [tradeType] Type of trade.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [startTimeAtMillis] The timestamp specifies the earliest point in time for which data should be returned. The value is not included.
         * @param {number} [endTimeAtMillis] The timestamp specifies the latest point in time for which data should be returned. The value is included.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentTrades: async (symbol: string, tradeType?: TradeType, limit?: number, startTimeAtMillis?: number, endTimeAtMillis?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getRecentTrades', 'symbol', symbol)
            const localVarPath = `/v1/exchange/trades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (tradeType !== undefined) {
                localVarQueryParameter['tradeType'] = tradeType;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startTimeAtMillis !== undefined) {
                localVarQueryParameter['startTimeAtMillis'] = startTimeAtMillis;
            }

            if (endTimeAtMillis !== undefined) {
                localVarQueryParameter['endTimeAtMillis'] = endTimeAtMillis;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExchangeApi - functional programming interface
 * @export
 */
export const ExchangeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExchangeApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves all market ticker information.
         * @summary /exchange/tickers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMarketTicker(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TickerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMarketTicker(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExchangeApi.getAllMarketTicker']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves candle stick data for a market.
         * @summary /exchange/candlesticks
         * @param {string} symbol The market symbol to get the klines for.
         * @param {KlineInterval} interval The interval to get the klines for.
         * @param {CandlePriceType} type Candle price type (last price, market price or oracle).
         * @param {number} [startTimeAtMillis] Timestamp in milliseconds in ms to get klines from.
         * @param {number} [endTimeAtMillis] Timestamp in milliseconds in ms to get klines until.
         * @param {number} [limit] Default 50; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCandlestickData(symbol: string, interval: KlineInterval, type: CandlePriceType, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Array<string>>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCandlestickData(symbol, interval, type, startTimeAtMillis, endTimeAtMillis, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExchangeApi.getCandlestickData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the current exchange information including available margin assets, markets, and rules.
         * @summary /exchange/info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExchangeInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExchangeInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExchangeApi.getExchangeInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves exchange statistics.
         * @summary /exchange/stats
         * @param {StatsInterval} [interval] 
         * @param {number} [startTimeAtMillis] Timestamp in milliseconds.
         * @param {number} [endTimeAtMillis] Timestamp in milliseconds.
         * @param {number} [limit] Number of records to return. Default is 30; max is 200.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExchangeStats(interval?: StatsInterval, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExchangeStats(interval, startTimeAtMillis, endTimeAtMillis, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExchangeApi.getExchangeStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the funding rate history for a specific market address.
         * @summary /exchange/fundingRateHistory
         * @param {string} symbol The market symbol to get funding rate history for
         * @param {number} [limit] Number of records to return. Default is 100; max is 1000.
         * @param {number} [startTimeAtMillis] The timestamp specifies the earliest point in time for which data should be returned. The value is not included.
         * @param {number} [endTimeAtMillis] The timestamp specifies the latest point in time for which data should be returned. The value is included.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundingRateHistory(symbol: string, limit?: number, startTimeAtMillis?: number, endTimeAtMillis?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FundingRateEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundingRateHistory(symbol, limit, startTimeAtMillis, endTimeAtMillis, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExchangeApi.getFundingRateHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves aggregated ticker data for a market.
         * @summary /exchange/ticker
         * @param {string} symbol Market symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketTicker(symbol: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TickerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketTicker(symbol, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExchangeApi.getMarketTicker']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the current state of the orderbook.
         * @summary /exchange/depth
         * @param {string} symbol Market symbol to get the orderbook depth for.
         * @param {number} [limit] Maximum number of bids and asks to return. Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderbookDepth(symbol: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderbookDepthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderbookDepth(symbol, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExchangeApi.getOrderbookDepth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves recent trades executed on a market.
         * @summary /exchange/trades
         * @param {string} symbol The market symbol to get the trades for.
         * @param {TradeType} [tradeType] Type of trade.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [startTimeAtMillis] The timestamp specifies the earliest point in time for which data should be returned. The value is not included.
         * @param {number} [endTimeAtMillis] The timestamp specifies the latest point in time for which data should be returned. The value is included.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentTrades(symbol: string, tradeType?: TradeType, limit?: number, startTimeAtMillis?: number, endTimeAtMillis?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trade>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentTrades(symbol, tradeType, limit, startTimeAtMillis, endTimeAtMillis, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExchangeApi.getRecentTrades']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExchangeApi - factory interface
 * @export
 */
export const ExchangeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExchangeApiFp(configuration)
    return {
        /**
         * Retrieves all market ticker information.
         * @summary /exchange/tickers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMarketTicker(options?: RawAxiosRequestConfig): AxiosPromise<Array<TickerResponse>> {
            return localVarFp.getAllMarketTicker(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves candle stick data for a market.
         * @summary /exchange/candlesticks
         * @param {string} symbol The market symbol to get the klines for.
         * @param {KlineInterval} interval The interval to get the klines for.
         * @param {CandlePriceType} type Candle price type (last price, market price or oracle).
         * @param {number} [startTimeAtMillis] Timestamp in milliseconds in ms to get klines from.
         * @param {number} [endTimeAtMillis] Timestamp in milliseconds in ms to get klines until.
         * @param {number} [limit] Default 50; max 1000.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandlestickData(symbol: string, interval: KlineInterval, type: CandlePriceType, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Array<string>>> {
            return localVarFp.getCandlestickData(symbol, interval, type, startTimeAtMillis, endTimeAtMillis, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current exchange information including available margin assets, markets, and rules.
         * @summary /exchange/info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeInfo(options?: RawAxiosRequestConfig): AxiosPromise<ExchangeInfoResponse> {
            return localVarFp.getExchangeInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves exchange statistics.
         * @summary /exchange/stats
         * @param {StatsInterval} [interval] 
         * @param {number} [startTimeAtMillis] Timestamp in milliseconds.
         * @param {number} [endTimeAtMillis] Timestamp in milliseconds.
         * @param {number} [limit] Number of records to return. Default is 30; max is 200.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeStats(interval?: StatsInterval, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<StatsResponse> {
            return localVarFp.getExchangeStats(interval, startTimeAtMillis, endTimeAtMillis, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the funding rate history for a specific market address.
         * @summary /exchange/fundingRateHistory
         * @param {string} symbol The market symbol to get funding rate history for
         * @param {number} [limit] Number of records to return. Default is 100; max is 1000.
         * @param {number} [startTimeAtMillis] The timestamp specifies the earliest point in time for which data should be returned. The value is not included.
         * @param {number} [endTimeAtMillis] The timestamp specifies the latest point in time for which data should be returned. The value is included.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundingRateHistory(symbol: string, limit?: number, startTimeAtMillis?: number, endTimeAtMillis?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<FundingRateEntry>> {
            return localVarFp.getFundingRateHistory(symbol, limit, startTimeAtMillis, endTimeAtMillis, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves aggregated ticker data for a market.
         * @summary /exchange/ticker
         * @param {string} symbol Market symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketTicker(symbol: string, options?: RawAxiosRequestConfig): AxiosPromise<TickerResponse> {
            return localVarFp.getMarketTicker(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the current state of the orderbook.
         * @summary /exchange/depth
         * @param {string} symbol Market symbol to get the orderbook depth for.
         * @param {number} [limit] Maximum number of bids and asks to return. Default 500; max 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderbookDepth(symbol: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<OrderbookDepthResponse> {
            return localVarFp.getOrderbookDepth(symbol, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves recent trades executed on a market.
         * @summary /exchange/trades
         * @param {string} symbol The market symbol to get the trades for.
         * @param {TradeType} [tradeType] Type of trade.
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [startTimeAtMillis] The timestamp specifies the earliest point in time for which data should be returned. The value is not included.
         * @param {number} [endTimeAtMillis] The timestamp specifies the latest point in time for which data should be returned. The value is included.
         * @param {number} [page] The page number to retrieve in a paginated response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentTrades(symbol: string, tradeType?: TradeType, limit?: number, startTimeAtMillis?: number, endTimeAtMillis?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Trade>> {
            return localVarFp.getRecentTrades(symbol, tradeType, limit, startTimeAtMillis, endTimeAtMillis, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExchangeApi - object-oriented interface
 * @export
 * @class ExchangeApi
 * @extends {BaseAPI}
 */
export class ExchangeApi extends BaseAPI {
    /**
     * Retrieves all market ticker information.
     * @summary /exchange/tickers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeApi
     */
    public getAllMarketTicker(options?: RawAxiosRequestConfig) {
        return ExchangeApiFp(this.configuration).getAllMarketTicker(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves candle stick data for a market.
     * @summary /exchange/candlesticks
     * @param {string} symbol The market symbol to get the klines for.
     * @param {KlineInterval} interval The interval to get the klines for.
     * @param {CandlePriceType} type Candle price type (last price, market price or oracle).
     * @param {number} [startTimeAtMillis] Timestamp in milliseconds in ms to get klines from.
     * @param {number} [endTimeAtMillis] Timestamp in milliseconds in ms to get klines until.
     * @param {number} [limit] Default 50; max 1000.
     * @param {number} [page] The page number to retrieve in a paginated response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeApi
     */
    public getCandlestickData(symbol: string, interval: KlineInterval, type: CandlePriceType, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return ExchangeApiFp(this.configuration).getCandlestickData(symbol, interval, type, startTimeAtMillis, endTimeAtMillis, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the current exchange information including available margin assets, markets, and rules.
     * @summary /exchange/info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeApi
     */
    public getExchangeInfo(options?: RawAxiosRequestConfig) {
        return ExchangeApiFp(this.configuration).getExchangeInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves exchange statistics.
     * @summary /exchange/stats
     * @param {StatsInterval} [interval] 
     * @param {number} [startTimeAtMillis] Timestamp in milliseconds.
     * @param {number} [endTimeAtMillis] Timestamp in milliseconds.
     * @param {number} [limit] Number of records to return. Default is 30; max is 200.
     * @param {number} [page] The page number to retrieve in a paginated response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeApi
     */
    public getExchangeStats(interval?: StatsInterval, startTimeAtMillis?: number, endTimeAtMillis?: number, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return ExchangeApiFp(this.configuration).getExchangeStats(interval, startTimeAtMillis, endTimeAtMillis, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the funding rate history for a specific market address.
     * @summary /exchange/fundingRateHistory
     * @param {string} symbol The market symbol to get funding rate history for
     * @param {number} [limit] Number of records to return. Default is 100; max is 1000.
     * @param {number} [startTimeAtMillis] The timestamp specifies the earliest point in time for which data should be returned. The value is not included.
     * @param {number} [endTimeAtMillis] The timestamp specifies the latest point in time for which data should be returned. The value is included.
     * @param {number} [page] The page number to retrieve in a paginated response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeApi
     */
    public getFundingRateHistory(symbol: string, limit?: number, startTimeAtMillis?: number, endTimeAtMillis?: number, page?: number, options?: RawAxiosRequestConfig) {
        return ExchangeApiFp(this.configuration).getFundingRateHistory(symbol, limit, startTimeAtMillis, endTimeAtMillis, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves aggregated ticker data for a market.
     * @summary /exchange/ticker
     * @param {string} symbol Market symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeApi
     */
    public getMarketTicker(symbol: string, options?: RawAxiosRequestConfig) {
        return ExchangeApiFp(this.configuration).getMarketTicker(symbol, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the current state of the orderbook.
     * @summary /exchange/depth
     * @param {string} symbol Market symbol to get the orderbook depth for.
     * @param {number} [limit] Maximum number of bids and asks to return. Default 500; max 1000.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeApi
     */
    public getOrderbookDepth(symbol: string, limit?: number, options?: RawAxiosRequestConfig) {
        return ExchangeApiFp(this.configuration).getOrderbookDepth(symbol, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves recent trades executed on a market.
     * @summary /exchange/trades
     * @param {string} symbol The market symbol to get the trades for.
     * @param {TradeType} [tradeType] Type of trade.
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [startTimeAtMillis] The timestamp specifies the earliest point in time for which data should be returned. The value is not included.
     * @param {number} [endTimeAtMillis] The timestamp specifies the latest point in time for which data should be returned. The value is included.
     * @param {number} [page] The page number to retrieve in a paginated response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeApi
     */
    public getRecentTrades(symbol: string, tradeType?: TradeType, limit?: number, startTimeAtMillis?: number, endTimeAtMillis?: number, page?: number, options?: RawAxiosRequestConfig) {
        return ExchangeApiFp(this.configuration).getRecentTrades(symbol, tradeType, limit, startTimeAtMillis, endTimeAtMillis, page, options).then((request) => request(this.axios, this.basePath));
    }
}

