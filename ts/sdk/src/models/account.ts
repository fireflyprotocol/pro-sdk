/* tslint:disable */
/* eslint-disable */
/**
 * Bluefin API
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { Asset } from './asset';
// May contain unused imports in some cases
// @ts-ignore
import type { AuthorizedWallet } from './authorized-wallet';
// May contain unused imports in some cases
// @ts-ignore
import type { Position } from './position';
// May contain unused imports in some cases
// @ts-ignore
import type { TradingFees } from './trading-fees';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {TradingFees}
     * @memberof Account
     */
    'tradingFees': TradingFees;
    /**
     * If the user can trade.
     * @type {boolean}
     * @memberof Account
     */
    'canTrade': boolean;
    /**
     * If the current user can deposit to the account.
     * @type {boolean}
     * @memberof Account
     */
    'canDeposit': boolean;
    /**
     * If the current user can withdraw from the account.
     * @type {boolean}
     * @memberof Account
     */
    'canWithdraw': boolean;
    /**
     * Total effective balance in USD (e9 format).
     * @type {string}
     * @memberof Account
     */
    'crossEffectiveBalanceE9': string;
    /**
     * The sum of initial margin required across all cross positions (e9 format).
     * @type {string}
     * @memberof Account
     */
    'crossMarginRequiredE9': string;
    /**
     * The sum of initial margin required across all open orders (e9 format).
     * @type {string}
     * @memberof Account
     */
    'totalOrderMarginRequiredE9': string;
    /**
     * The amount of margin available to open new positions and orders (e9 format).
     * @type {string}
     * @memberof Account
     */
    'marginAvailableE9': string;
    /**
     * The sum of maintenance margin required across all cross positions (e9 format).
     * @type {string}
     * @memberof Account
     */
    'crossMaintenanceMarginRequiredE9': string;
    /**
     * The amount of margin available before liquidation (e9 format).
     * @type {string}
     * @memberof Account
     */
    'crossMaintenanceMarginAvailableE9': string;
    /**
     * The ratio of the maintenance margin required to the account value (e9 format).
     * @type {string}
     * @memberof Account
     */
    'crossMaintenanceMarginRatioE9': string;
    /**
     * The leverage of the account (e9 format).
     * @type {string}
     * @memberof Account
     */
    'crossLeverageE9': string;
    /**
     * Total unrealized profit (e9 format).
     * @type {string}
     * @memberof Account
     */
    'totalUnrealizedPnlE9': string;
    /**
     * Unrealized profit of cross positions (e9 format).
     * @type {string}
     * @memberof Account
     */
    'crossUnrealizedPnlE9': string;
    /**
     * An implicitly negative number that sums only the losses of all cross positions.
     * @type {string}
     * @memberof Account
     */
    'crossUnrealizedLossE9': string;
    /**
     * The total value of the cross account, combining the cross effective balance and unrealized PnL across all cross positions, and subtracting any pending funding payments on any cross position. 
     * @type {string}
     * @memberof Account
     */
    'crossAccountValueE9': string;
    /**
     * The total value of the account, combining the total effective balance and unrealized PnL across all positions, and subtracting any pending funding payments on any position. 
     * @type {string}
     * @memberof Account
     */
    'totalAccountValueE9': string;
    /**
     * Last update time in milliseconds since Unix epoch.
     * @type {number}
     * @memberof Account
     */
    'updatedAtMillis': number;
    /**
     * 
     * @type {Array<Asset>}
     * @memberof Account
     */
    'assets': Array<Asset>;
    /**
     * 
     * @type {Array<Position>}
     * @memberof Account
     */
    'positions': Array<Position>;
    /**
     * Deprecated: Replaced with authorizedWallets.
     * @type {Array<string>}
     * @memberof Account
     * @deprecated
     */
    'authorizedAccounts': Array<string>;
    /**
     * The address of the account.
     * @type {string}
     * @memberof Account
     */
    'accountAddress': string;
    /**
     * The wallets that are authorized to trade on behalf of the current account.
     * @type {Array<AuthorizedWallet>}
     * @memberof Account
     */
    'authorizedWallets': Array<AuthorizedWallet>;
}

