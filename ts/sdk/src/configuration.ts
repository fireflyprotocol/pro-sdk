/* tslint:disable */
/* eslint-disable */
/**
 * Bluefin API
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Environment, EnvironmentConfigurations, Services } from "./types";

export interface ConfigurationParameters {
  apiKey?:
    | string
    | Promise<string>
    | ((name: string) => string)
    | ((name: string) => Promise<string>);
  username?: string;
  password?: string;
  accessToken?:
    | string
    | Promise<string>
    | ((name?: string, scopes?: string[]) => string)
    | ((name?: string, scopes?: string[]) => Promise<string>);
  basePath?: string;
  serverIndex?: number;
  baseOptions?: any;
  formDataCtor?: new () => any;
}

export class Configuration {
  /**
   * parameter for apiKey security
   * @param name security name
   * @memberof Configuration
   */
  apiKey?:
    | string
    | Promise<string>
    | ((name: string) => string)
    | ((name: string) => Promise<string>);
  /**
   * parameter for basic security
   *
   * @type {string}
   * @memberof Configuration
   */
  username?: string;
  /**
   * parameter for basic security
   *
   * @type {string}
   * @memberof Configuration
   */
  password?: string;
  /**
   * parameter for oauth2 security
   * @param name security name
   * @param scopes oauth2 scope
   * @memberof Configuration
   */
  accessToken?:
    | string
    | Promise<string>
    | ((name?: string, scopes?: string[]) => string)
    | ((name?: string, scopes?: string[]) => Promise<string>);
  /**
   * override base path
   *
   * @type {string}
   * @memberof Configuration
   */
  basePath?: string;
  /**
   * override server index
   *
   * @type {number}
   * @memberof Configuration
   */
  serverIndex?: number;
  /**
   * base options for axios calls
   *
   * @type {any}
   * @memberof Configuration
   */
  baseOptions?: any;
  /**
   * The FormData constructor that will be used to create multipart form data
   * requests. You can inject this here so that execution environments that
   * do not support the FormData class can still run the generated client.
   *
   * @type {new () => FormData}
   */
  formDataCtor?: new () => any;

  constructor(param: ConfigurationParameters = {}) {
    this.apiKey = param.apiKey;
    this.username = param.username;
    this.password = param.password;
    this.accessToken = param.accessToken;
    this.basePath = param.basePath;
    this.serverIndex = param.serverIndex;
    this.baseOptions = {
      headers: {
        ...param.baseOptions?.headers,
        "User-Agent": "OpenAPI-Generator/typescript-axios",
      },
      ...param.baseOptions,
    };
    this.formDataCtor = param.formDataCtor;
  }

  /**
   * Check if the given MIME is a JSON MIME.
   * JSON MIME examples:
   *   application/json
   *   application/json; charset=UTF8
   *   APPLICATION/JSON
   *   application/vnd.company+json
   * @param mime - MIME (Multipurpose Internet Mail Extensions)
   * @return True if the given MIME is JSON, false otherwise.
   */
  public isJsonMime(mime: string): boolean {
    const jsonMime: RegExp = new RegExp(
      "^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$",
      "i"
    );
    return (
      mime !== null &&
      (jsonMime.test(mime) ||
        mime.toLowerCase() === "application/json-patch+json")
    );
  }
}

interface Configurations {
  authApiConfig: Configuration;
  exchangeApiConfig: Configuration;
  accountDataApiConfig: Configuration;
  tradeApiConfig: Configuration;
  marketWsConfig: Configuration;
  accountWsConfig: Configuration;
}

export class ConfigurationBuilder {
  static buildConifugrations(
    configuration: EnvironmentConfigurations[Environment]
  ): Configurations {
    return {
      authApiConfig: new Configuration({
        basePath: configuration.authHost,
      }),
      exchangeApiConfig: new Configuration({
        basePath: configuration.apiHost,
      }),
      accountDataApiConfig: new Configuration({
        basePath: configuration.apiHost,
      }),
      tradeApiConfig: new Configuration({
        basePath: configuration.tradeHost,
      }),
      marketWsConfig: new Configuration({
        basePath: configuration.marketWsHost,
      }),
      accountWsConfig: new Configuration({
        basePath: configuration.accountWsHost,
      }),
    };
  }
}

export class ConfigurationManager {
  // TODO: (improvement) enums to have string values which make this possible
  // * this.#configurations[service] = <val>
  #configurations: Configurations;

  constructor(configurations: Configurations) {
    this.#configurations = configurations;
  }

  setAccessToken(service: Services, token?: string) {
    switch (service) {
      case Services.Account:
        this.#configurations.accountDataApiConfig.accessToken = token;
        break;
      case Services.Auth:
        this.#configurations.authApiConfig.accessToken = token;
        break;
      case Services.AccountWebsocket:
        this.#configurations.accountWsConfig.accessToken = token;
        break;
      case Services.Exchange:
        this.#configurations.exchangeApiConfig.accessToken = token;
        break;
      case Services.MarketWebsocket:
        this.#configurations.marketWsConfig.accessToken = token;
        break;
      case Services.Trade:
        this.#configurations.tradeApiConfig.accessToken = token;
        break;
    }
  }

  getToken(
    service: Services
  ):
    | string
    | Promise<string>
    | ((name?: string, scopes?: string[]) => string)
    | ((name?: string, scopes?: string[]) => Promise<string>)
    | undefined {
    switch (service) {

      case Services.Account:
        return this.#configurations.accountDataApiConfig.accessToken;
      case Services.Auth:
        return this.#configurations.authApiConfig.accessToken;
      case Services.AccountWebsocket:
        return this.#configurations.accountWsConfig.accessToken;
      case Services.Exchange:
        return this.#configurations.exchangeApiConfig.accessToken;
      case Services.MarketWebsocket:
        return this.#configurations.marketWsConfig.accessToken;
      case Services.Trade:
        return this.#configurations.tradeApiConfig.accessToken;
    }
  }

  getBasePath(service: Services): string | undefined {
    switch (service) {
      case Services.Account:
        return this.#configurations.accountDataApiConfig.basePath;
      case Services.Auth:
        return this.#configurations.authApiConfig.basePath;
      case Services.AccountWebsocket:
        return this.#configurations.accountWsConfig.basePath;
      case Services.Exchange:
        return this.#configurations.exchangeApiConfig.basePath;
      case Services.MarketWebsocket:
        return this.#configurations.marketWsConfig.basePath;
      case Services.Trade:
        return this.#configurations.tradeApiConfig.basePath;
    }
  }
}
