openapi: 3.0.3
info:
  title: Bluefin Account Data API
  version: v1
  description: |
    All numeric quantities are represented as string in e9 format.
tags:
  - name: Account Data
    description: "Account Data Service"
servers:
  - url: https://api.{env}.bluefin.io
    variables:
      env:
        default: sui-staging
        enum:
          - sui-staging
          - sui-prod
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional, arbitrary value for documentation purposes
  schemas:
    Account:
      type: object
      required:
        - tradingFees
        - canTrade
        - canDeposit
        - canWithdraw
        - crossEffectiveBalanceE9
        - crossMarginRequiredE9
        - totalOrderMarginRequiredE9
        - marginAvailableE9
        - crossMaintenanceMarginRequiredE9
        - crossMaintenanceMarginAvailableE9
        - crossMaintenanceMarginRatioE9
        - crossLeverageE9
        - crossUnrealizedPnlE9
        - totalUnrealizedPnlE9
        - crossUnrealizedLossE9
        - crossAccountValueE9
        - totalAccountValueE9
        - updatedAtMillis
        - assets
        - positions
        - authorizedAccounts
        - accountAddress
      properties:
        tradingFees:
          $ref: "./common.yaml#/components/schemas/TradingFees"
        canTrade:
          type: boolean
          description: If the user can trade.
          example: true
        canDeposit:
          type: boolean
          description: If the current user can deposit to the account.
          example: true
        canWithdraw:
          type: boolean
          description: If the current user can withdraw from the account.
          example: false
        crossEffectiveBalanceE9:
          type: string
          description: Total effective balance in USD (e9 format).
          example: "12000000000000" # 12,000 USD
        crossMarginRequiredE9:
          type: string
          description: The sum of initial margin required across all cross positions (e9 format).
          example: "1000000000" # 1,000 USD
        totalOrderMarginRequiredE9:
          type: string
          description: The sum of initial margin required across all open orders (e9 format).
          example: "1000000000" # 1,000 USD
        marginAvailableE9:
          type: string
          description: The amount of margin available to open new positions and orders (e9 format).
          example: "1000000000" # 1,000 USD
        crossMaintenanceMarginRequiredE9:
          type: string
          description: The sum of maintenance margin required across all cross positions (e9 format).
          example: "5000000000" # 5,000 USD
        crossMaintenanceMarginAvailableE9:
          type: string
          description: The amount of margin available before liquidation (e9 format).
          example: "1000000000" # 1,000 USD
        crossMaintenanceMarginRatioE9:
          type: string
          description: The ratio of the maintenance margin required to the account value (e9 format).
          example: "1000000000" # 1,000 USD
        crossLeverageE9:
          type: string
          description: The leverage of the account (e9 format).
          example: "1000000000" # 1,000 USD
        totalUnrealizedPnlE9:
          type: string
          description: Total unrealized profit (e9 format).
          example: "2000000000" # 2,000 USD
        crossUnrealizedPnlE9:
          type: string
          description: Unrealized profit of cross positions (e9 format).
          example: "2000000000" # 2,000 USD
        crossUnrealizedLossE9:
          type: string
          description: An implicitly negative number that sums only the losses of all cross positions.
          example: "1000000000" # 1,000 USD
        crossAccountValueE9:
          type: string
          description: |
            The total value of the cross account, combining the cross effective
            balance and unrealized PnL across all cross positions, and subtracting any pending
            funding payments on any cross position.
          example: "1000000000" # 1,000 USD
        totalAccountValueE9:
          type: string
          description: |
            The total value of the account, combining the total effective
            balance and unrealized PnL across all positions, and subtracting any pending
            funding payments on any position.
          example: "1000000000" # 1,000 USD
        updatedAtMillis:
          type: integer
          format: int64
          description: Last update time in milliseconds since Unix epoch.
          example: 1627872345678
        assets:
          type: array
          items:
            $ref: "./common.yaml#/components/schemas/Asset"
        positions:
          type: array
          items:
            $ref: "#/components/schemas/Position"
        authorizedAccounts:
          type: array
          items:
            type: string
          deprecated: true
          description: "Deprecated: Replaced with authorizedWallets."
        accountAddress:
          type: string
          description: The address of the account.
          example: "0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcde"
        authorizedWallets:
          type: array
          items:
            $ref: "#/components/schemas/AuthorizedWallet"
          description: The wallets that are authorized to trade on behalf of the current account.

    AuthorizedWallet:
      type: object
      required:
        - address
        - authorizedAtMillis
      properties:
        address:
          type: string
          description: The address of the authorized wallet.
        alias:
          type: string
          description: The alias of the authorized wallet.
        authorizedAtMillis:
          type: integer
          format: int64
          description: The timestamp in milliseconds when the wallet was authorized.

    AccountFundingRateHistory:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AccountFundingRateHistoryData"
    AccountFundingRateHistoryData:
      type: object
      required:
        - paymentAmountE9
        - positionSide
        - rateE9
        - symbol
        - executedAtMillis
        - computedAtMillis
      properties:
        paymentAmountE9:
          type: string
          description: Payment amount in e9 format.
          example: "1000000"
        positionSide:
          $ref: "./common.yaml#/components/schemas/PositionSide"
        rateE9:
          type: string
          description: "Funding rate value (e9 format)."
          example: "10000000"
        symbol:
          type: string
          description: Market address.
          example: "0x123456789abcdef"
        executedAtMillis:
          type: integer
          format: int64
          description: Execution timestamp in milliseconds since Unix epoch.
          example: 1569514978020
        computedAtMillis:
          type: integer
          format: int64
          description: Computed timestamp in milliseconds since Unix epoch.
          example: 1569514978020
    Position:
      type: object
      required:
        - symbol
        - avgEntryPriceE9
        - clientSetLeverageE9
        - liquidationPriceE9
        - markPriceE9
        - notionalValueE9
        - sizeE9
        - unrealizedPnlE9
        - side
        - marginRequiredE9
        - maintenanceMarginE9
        - isIsolated
        - updatedAtMillis
        - isolatedMarginE9
        - fundingRatePaymentAllTimeE9
        - fundingRatePaymentSinceChangeE9
        - fundingRatePaymentSinceOpenedE9
      properties:
        symbol:
          type: string
          description: Market address.
        avgEntryPriceE9:
          type: string
          description: Average entry price determined by a simple average of all entry prices resulting in this position size (e9 format).
          example: "400000000000" # 400 USD
        clientSetLeverageE9:
          type: string
          description: Isolated position leverage (e9 format).
          example: "100000000000" # 100
        liquidationPriceE9:
          type: string
          description: Liquidation price (e9 format).
          example: "0"
        markPriceE9:
          type: string
          description: Mark price (e9 format).
          example: "667950671178" # 6679.50671178 USD
        notionalValueE9:
          type: string
          description: Notional value (e9 format).
          example: "0"
        sizeE9:
          type: string
          description: Position size (e9 format).
          example: "100000000" # 100 units
        unrealizedPnlE9:
          type: string
          description: Unrealized profit (e9 format).
          example: "-1000000000" # -1,000 USD
        side:
          $ref: "./common.yaml#/components/schemas/PositionSide"
        marginRequiredE9:
          type: string
          description: Initial margin required with current mark price (e9 format).
          example: "0"
        maintenanceMarginE9:
          type: string
          description: Maintenance margin required with current mark price (e9 format).
          example: "0"
        isIsolated:
          type: boolean
          description: If the position is isolated.
          example: true
        isolatedMarginE9:
          type: string
          description: Margin value present if margin type is isolated (e9 format).
          example: "1000000000"
        updatedAtMillis:
          type: integer
          format: int64
          description: Last update time.
          example: 1733899435274
        fundingRatePaymentAllTimeE9:
          type: string
          description: Total funding rate payment (e9 format).
          example: "0"
        fundingRatePaymentSinceChangeE9:
          type: string
          description: Funding rate payment since last position change (e9 format).
          example: "0"
        fundingRatePaymentSinceOpenedE9:
          type: string
          description: Funding rate payment since position opened (e9 format).
          example: "0"
    Transaction:
      type: object
      required:
        - id
        - type
        - amountE9
        - assetSymbol
        - executedAtMillis
      properties:
        id:
          type: string
          description: Transaction ID.
          example: "9689322392"
        symbol:
          type: string
          description: Market address.
          example: "0x123456789abcdef"
        type:
          $ref: "./common.yaml#/components/schemas/TransactionType"
        amountE9:
          type: string
          description: Amount in e9 format (positive or negative).
          example: "-1000000"
        status:
          type: string
          description: Transaction status (SUCCESS, REJECTED).
          example: "SUCCESS"
        assetSymbol:
          type: string
          description: Asset bank address.
        tradeId:
          type: string
          description: Trade ID
        executedAtMillis:
          type: integer
          format: int64
          description: Transaction timestamp in milliseconds since Unix epoch.
          example: 1569514978020

    UpdateAccountPreferenceRequest:
      type: object
      additionalProperties: true
      properties:
        language:
          type: string
          description: User preferred language.
          example: en
        theme:
          type: string
          description: User preferred theme.
          example: dark
        market:
          type: array
          items:
            $ref: "#/components/schemas/AccountMarketPreference"

    AccountPreference:
      type: object
      additionalProperties: true
      properties:
        language:
          type: string
          description: User preferred language.
          example: en
        theme:
          type: string
          description: User preferred theme.
          example: dark
        market:
          type: array
          items:
            $ref: "#/components/schemas/AccountMarketPreference"
    AccountMarketPreference:
      type: object
      properties:
        marginType:
          $ref: "./common.yaml#/components/schemas/MarginType"
        setLeverage:
          type: integer
          description: User set leverage (e.g., 10x).
          example: 100
  responses:
    DefaultError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "./common.yaml#/components/schemas/Error"
paths:
  /api/v1/account/fundingRateHistory:
    get:
      tags:
        - Account Data
      summary: Get user's funding rate history
      operationId: getAccountFundingRateHistory
      security:
        - bearerAuth: []
      parameters:
        - name: accountAddress
          in: query
          schema:
            type: string
          description: Account address to filter funding rate history by.
        - name: limit
          in: query
          schema:
            type: integer
            default: 500
            minimum: 1
            maximum: 1000
          description: Default 500; max 1000.
        - name: page
          in: query
          description: The page number to retrieve in a paginated response.
          schema:
            type: integer
            default: 1
            minimum: 1
      responses:
        "200":
          description: Successful response with funding rate history.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountFundingRateHistory"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "500":
          description: "internal server error"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
  /api/v1/account/preferences:
    get:
      tags:
        - Account Data
      summary: Get user's account preferences.
      operationId: getAccountPreferences
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response with account preferences.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountPreference"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "500":
          description: "internal server error"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
    put:
      tags:
        - Account Data
      summary: Update user's account preferences. This will overwrite the preferences, so always send the full object.
      operationId: putAccountPreferences
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAccountPreferenceRequest"
      responses:
        "204":
          description: Success.
        "400":
          description: "request missing request body"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "413":
          description: "request entity too large"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "500":
          description: "internal server error"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /api/v1/account:
    get:
      tags:
        - Account Data
      summary: Get user's account details.
      operationId: getAccountDetails
      security: []
      parameters:
        - name: accountAddress
          in: query
          schema:
            type: string
          description: Account address to fetch account details by.
      responses:
        "200":
          description: Successful response with account details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "500":
          description: "internal server error"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /api/v1/account/trades:
    get:
      tags:
        - Account Data
      summary: Get user's trade history.
      operationId: getAccountTrades
      security:
        - bearerAuth: []
      parameters:
        - name: symbol
          in: query
          schema:
            type: string
          description: Market address to filter trades by. If not specified, returns trades for all markets.
        - name: startTimeAtMillis
          in: query
          required: false
          schema:
            type: integer
            x-go-type: int64
            minimum: 0
          description: Start time in milliseconds. Defaults to 7 days ago if not specified.
        - name: endTimeAtMillis
          in: query
          required: false
          schema:
            type: integer
            x-go-type: int64
            minimum: 0
          description: End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 500
            minimum: 1
            maximum: 1000
          description: Default 500; max 1000.
        - name: tradeType
          in: query
          required: false
          schema:
            $ref: "./common.yaml#/components/schemas/TradeType"
          description: Type of trade. By default returns all. UNSPECIFIED returns all.
        - name: page
          in: query
          required: false
          description: The page number to retrieve in a paginated response.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: Successful response with trade details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./common.yaml#/components/schemas/Trade"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "500":
          description: "internal server error"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
  /api/v1/account/transactions:
    get:
      tags:
        - Account Data
      summary: Get user's transaction history (any change in balance).
      operationId: getAccountTransactionHistory
      security:
        - bearerAuth: []
      parameters:
        - name: types
          in: query
          description: Optional query parameter to filter transactions by type.
          required: false
          explode: true
          style: form
          schema:
            type: array
            items:
              $ref: "./common.yaml#/components/schemas/TransactionType"
        - name: assetSymbol
          schema:
            type: string
          in: query
          description: Optional query parameter to filter transactions by asset bank address.
          required: false
        - name: startTimeAtMillis
          in: query
          required: false
          schema:
            type: integer
            x-go-type: int64
            minimum: 0
          description: Start time in milliseconds. Defaults to 7 days ago if not specified.
        - name: endTimeAtMillis
          description: End time in milliseconds. Defaults to now if not specified. Must be greater than start time and must be less than 7 days apart.
          in: query
          required: false
          schema:
            type: integer
            x-go-type: int64
            minimum: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 500
            minimum: 1
            maximum: 1000
          description: Default 500; max 1000.
        - name: page
          in: query
          required: false
          description: The page number to retrieve in a paginated response.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: Successful response with transaction history details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "account not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "500":
          description: "internal server error"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
