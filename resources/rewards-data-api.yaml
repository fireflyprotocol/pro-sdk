openapi: 3.0.3
info:
  title: Bluefin Rewards API
  description: Rewards Info Endpoints |
    All numeric quantities are represented as string in e9 format.
  version: 1.0.0
tags:
  - name: Rewards
    description: Rewards Info Endpoints
servers:
  - url: https://api.{env}.bluefin.io
    variables:
      env:
        default: sui-staging
        enum:
          - sui-staging
          - sui-prod
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CampaignRewards:
      $ref:
        "#/components/schemas/UserCampaignRewards"
        # Add other campaign data types as needed

    # Campaign rewards schema can be extended to have custom fields for the campaign once start adding more campaign specific data
    UserCampaignRewards:
      type: object
      required:
        - userAddress
        - campaignName
        - epochNumber
        - intervalNumber
        - symbol
        - status
        - blueRewardsE9
        - suiRewardsE9
        - walRewardsE9
        - cashRewardsE9
        - userFeePaidE9
        - intervalStartDate
        - intervalEndDate
        - isDisbursed
        - txnDigest
      properties:
        userAddress:
          type: string
          description: User address for the rewards earned data.
          example: "0x1234567890abcdef"
        campaignName:
          type: string
          description: Name of the campaign.
          example: "TRADE_AND_EARN"
        epochNumber:
          type: integer
          description: Epoch number for the rewards earned data.
          example: 6
        intervalNumber:
          type: integer
          description: Interval number for the rewards earned data.
          example: 6
        symbol:
          type: string
          description: Market Symbol.
          example: "BTC-PERP"
        status:
          type: string
          enum:
            - ACTIVE
            - NOT_STARTED
            - FINALIZED
            - COOLDOWN
        blueRewardsE9:
          type: string
          description: Total blue-perp token rewards earned in the epoch (e9 format).
          example: 10000000
        suiRewardsE9:
          type: string
          description: Total sui-perp token rewards earned in the epoch (e9 format).
          example: 10000000
        walRewardsE9:
          type: string
          description: Total wal-perp rewards earned in the epoch (e9 format).
          example: 10000000
        cashRewardsE9:
          type: string
          description: Total cash rewards earned in the epoch (e9 format).
          example: 10000000
        userFeePaidE9:
          type: string
          description: Total user fee paid in the epoch (e9 format).
          example: 10000000
        intervalStartDate:
          type: integer
          description: Time in milliseconds for interval start date.
          example: 1724121094751
        intervalEndDate:
          type: integer
          description: Time in milliseconds for interval end date.
          example: 1724121094751
        isDisbursed:
          type: boolean
          description: Indicates if the rewards have been disbursed.
          example: false
        txnDigest:
          type: string
          description: Transaction digest of the disbursement.
          example: "6Ts8P3kjA9bb9MgbpRUYQfSwd8JwYdQpiEXXXd3iWfWK"
    IntervalRewards:
      type: object
      required:
        - UserAddress
        - IntervalNumber
        - Status
        - BlueRewardsE9
        - SuiRewardsE9
        - WalRewardsE9
      properties:
        UserAddress:
          type: string
          description: User address for the rewards earned data.
          example: "0x1234567890abcdef"
        Status:
          type: string
          enum:
            - ACTIVE
            - NOT_STARTED
            - FINALIZED
            - COOLDOWN
        BlueRewardsE9:
          type: string
          description: Total Blue token rewards earned in the interval (e9 format).
          example: 10000000
        SuiRewardsE9:
          type: string
          description: Total Sui token rewards earned in the interval (e9 format).
          example: 10000000
        WalRewardsE9:
          type: string
          description: Total wal rewards earned in the interval (e9 format).
          example: 10000000
        IntervalNumber:
          type: integer
          description: Interval Id of the interval for the rewards earned data.
          example: 6

    RewardsSummary:
      type: object
      required:
        - UserAddress
        - BlueRewardsE9
        - SuiRewardsE9
        - WalRewardsE9
      properties:
        UserAddress:
          type: string
          description: User address for the rewards earned data.
          example: "0x1234567890abcdef"
        BlueRewardsE9:
          type: string
          description: Total Blue token rewards earned by the user (e9 format).
          example: 10000000
        SuiRewardsE9:
          type: string
          description: Total Sui token rewards earned by the user (e9 format).
          example: 10000000
        WalRewardsE9:
          type: string
          description: Total wal rewards earned by the user (e9 format).
          example: 10000000

    CampaignMetadata:
      type: object
      required:
        - Status
        - CampaignName
        - ParentCampaignName
        - StartDate
        - EndDate
      properties:
        Status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        CampaignName:
          type: string
          description: Name of the campaign.
          example: "TRADE_AND_EARN"
        ParentCampaignName:
          type: string
          description: Name of the parent campaign.
          example: ""
        StartDate:
          type: integer
          description: Time in milliseconds for campaign start date.
          example: 1724121094751
        EndDate:
          type: integer
          description: Time in milliseconds for campaign end date.
          example: 1724121094751

    EpochMetadata:
      type: object
      required:
        - Status
        - CampaignName
        - EpochId
        - EpochNumber
        - StartDate
        - EndDate
      properties:
        Status:
          type: string
          enum:
            - ACTIVE
            - NOT_STARTED
            - FINALIZED
            - COOLDOWN
        CampaignName:
          type: string
          description: Name of the campaign.
          example: "TRADE_AND_EARN"
        EpochId:
          type: integer
          description: Epoch Id of the epoch.
          example: 6
        EpochNumber:
          type: integer
          description: Epoch number for the queried epoch.
          example: 6
        StartDate:
          type: integer
          description: Time in milliseconds for campaign start date.
          example: 1724121094751
        EndDate:
          type: integer
          description: Time in milliseconds for campaign end date.
          example: 1724121094751

    IntervalMetadata:
      type: object
      required:
        - Status
        - StartDate
        - EndDate
        - IntervalId
        - IntervalType
      properties:
        Status:
          type: string
          enum:
            - ACTIVE
            - NOT_STARTED
            - FINALIZED
            - COOLDOWN
        StartDate:
          type: integer
          description: Time in milliseconds for interval start date.
          example: 1724121094751
        EndDate:
          type: integer
          description: Time in milliseconds for interval end date.
          example: 1724121094751
        IntervalId:
          type: integer
          description: Interval Id of the interval.
          example: 6
        IntervalType:
          type: string
          description: Type of the interval.
          example: "WEEK"

    EpochConfigs:
      type: object
      required:
        - campaignName
        - epochDuration
        - suiRewardsAllocationE9
        - blueRewardsAllocationE9
        - walRewardsAllocationE9
        - config
      properties:
        campaignName:
          type: string
          description: The name of the campaign.
          example: "TRADE_AND_EARN"
        epochDuration:
          type: integer
          description: Duration of the epoch in milliseconds.
          example: 604800000
        suiRewardsAllocationE9:
          type: string
          description: Allocation of Sui token rewards in the epoch (e9 format).
          example: 200000000000
        blueRewardsAllocationE9:
          type: string
          description: Allocation of Blue token rewards in the epoch (e9 format).
          example: 5000000000
        walRewardsAllocationE9:
          type: string
          description: Allocation of wal token rewards in the epoch (e9 format)
          example: 200000000000
        config:
          type: object
          description: Object to add custom configurations for campaigns.
          additionalProperties: true

    FeeConfigs:
      type: object
      description: Map of various fee-related configurations
      properties:
        referralPerpsFee:
          type: string
          description: Earnings from referral perps fees
          example: "10"
        subaffiliatePerpsEarnings:
          type: string
          description: Earnings from subaffiliate perps
          example: "50"
        spotLPFee:
          type: string
          description: Earnings from spot LP fees
          example: "20"
        referralSpotLPFee:
          type: string
          description: Earnings from referral spot LP fees
          example: "15"
        referralLendingRewards:
          type: string
          description: Earnings from referral lending rewards
          example: "30"
        perpsFeeCashback:
          type: string
          description: Cashback from perps fees
          example: "25"
        perpsRevShare:
          type: string
          description: Revenue share percentage for perps
          example: "10"
    # Not adding userAddress as it is not required for the API if we are extracting it from auth token
    # Post endpoints are for admin-only access, need to add auth for these endpoints

    AffiliateMetadata:
      type: object
      required:
        - userAddress
        - hasTraded
      properties:
        userAddress:
          type: string
          description: The user's wallet address
          example: "0x1234567890abcdef"
        parentReferralCode:
          type: string
          nullable: true
          description: The referral code of the parent affiliate
          example: "ABC123"
        referralCode:
          type: string
          nullable: true
          description: The user's referral code if approved as an affiliate
          example: "AFF123"
        name:
          type: string
          description: The name of the affiliate
          example: "John"
        parentName:
          type: string
          nullable: true
          description: The name of the parent affiliate
          example: "Jane"
        fees:
          type: object
          description: Map of various fee-related configurations
          $ref: "#/components/schemas/FeeConfigs"
        status:
          type: string
          nullable: true
          description: Status of the affiliate application
          enum:
            - PENDING
            - APPROVED
            - REJECTED
          example: "APPROVED"
        hasTraded:
          type: boolean
          description: Indicates whether the user has traded or not
          example: true
        tier:
          type: string
          description: Tier of the affiliate
          enum: # these are the possible tiers for affiliates which can be used to determine the affiliate's fee rewards criteria
            - "S" # Super Affiliate
            - "A" # Advance Affiliate
            - "N" # Normal Affiliate
            - "U" # User
          example: "S"

    AffiliateOnboardResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum:
            - APPROVED
            - REJECTED
            - PENDING
          description: Status of the application
          example: "PENDING"
        message:
          type: string
          description: Response message including rejection reason if application was rejected
          example: "Application Submitted Successfully"

    RefereeOnboardResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Response message indicating if the referral code exists
          example: "onboarded successfully"

    AffiliateSummary:
      type: object
      required:
        - userAddress
        - totalReferredUsers
        - totalEarningsE9
        - perpsRanking
        - spotRanking
        - lendRanking
      properties:
        userAddress:
          type: string
          description: The user's wallet address
          example: "0x1234567890abcdef"
        totalReferredUsers:
          type: integer
          description: Total number of referees
          example: 50
        totalEarningsE9:
          type: string
          description: Total earnings in e9 format
          example: "1000000000"
        perpsRanking:
          type: integer
          description: Ranking in perps trading category
          example: 5
        spotRanking:
          type: integer
          description: Ranking in spot trading category
          example: 3
        lendRanking:
          type: integer
          description: Ranking in lending category
          example: 7

    AffiliateOverview:
      type: object
      required:
        - userAddress
        - perpsRefereeEarningsE9
        - spotLPRefereeEarningsE9
        - lendingRefereeEarningsE9
        - perpsReferralEarningsE9
        - spotLPReferralEarningsE9
        - lendingReferralEarningsE9
        - perpsTotalEarningsE9
        - spotLPTotalEarningsE9
        - lendingTotalEarningsE9
        - totalReferralEarningsE9
        - totalRefereeEarningsE9
        - totalEarningsE9
      properties:
        userAddress:
          type: string
          description: The user's wallet address
          example: "0x1234567890abcdef"
        name:
          type: string
          description: Name of the affiliate
          example: "John"
        perpsRefereeEarningsE9:
          type: string
          description: Referee earnings from perps trading (e9 format)
          example: "1000000000"
        spotLPRefereeEarningsE9:
          type: string
          description: Referee earnings from spot LP (e9 format)
          example: "500000000"
        lendingRefereeEarningsE9:
          type: string
          description: Referee earnings from lending (e9 format)
          example: "300000000"
        perpsReferralEarningsE9:
          type: string
          description: Referral earnings from perps trading (e9 format)
          example: "1000000000"
        spotLPReferralEarningsE9:
          type: string
          description: Referral earnings from spot LP (e9 format)
          example: "500000000"
        lendingReferralEarningsE9:
          type: string
          description: Referral earnings from lending (e9 format)
          example: "300000000"
        perpsTotalEarningsE9:
          type: string
          description: Total earnings from perps trading (e9 format)
          example: "1000000000"
        spotLPTotalEarningsE9:
          type: string
          description: Total earnings from spot LP (e9 format)
          example: "500000000"
        lendingTotalEarningsE9:
          type: string
          description: Total earnings from lending (e9 format)
          example: "300000000"
        totalReferralEarningsE9:
          type: string
          description: Total earnings from referrals (e9 format)
          example: "800000000"
        totalRefereeEarningsE9:
          type: string
          description: Total earnings from referee activities (e9 format)
          example: "1200000000"
        totalEarningsE9:
          type: string
          description: Total earnings combining referrals and referee activities (e9 format)
          example: "2000000000"

    AffiliateIntervalOverview:
      type: object
      required:
        - userAddress
        - intervalNumber
        - intervalStartDate
        - intervalEndDate
        - status
        - referredSince
        - perpsRefereeEarningsE9
        - spotLPRefereeEarningsE9
        - lendingRefereeEarningsE9
        - perpsReferralEarningsE9
        - spotLPReferralEarningsE9
        - lendingReferralEarningsE9
        - perpsTotalEarningsE9
        - spotLPTotalEarningsE9
        - lendingTotalEarningsE9
        - totalReferralEarningsE9
        - totalRefereeEarningsE9
        - totalEarningsE9
      properties:
        userAddress:
          type: string
          description: The user's wallet address
          example: "0x1234567890abcdef"
        name:
          type: string
          description: Name of the affiliate
          example: "John"
        intervalNumber:
          type: integer
          description: The interval number for the affiliate's earnings data
          example: 5
        intervalStartDate:
          type: integer
          description: Start date of the interval in seconds
          example: 1724121094
        intervalEndDate:
          type: integer
          description: End date of the interval in seconds
          example: 1724725894
        status:
          type: string
          enum:
            - ACTIVE
            - NOT_STARTED
            - FINALIZED
            - COOLDOWN
          description: Status of the interval
          example: "ACTIVE"
        referredSince:
          type: string
          description: Date when the user was referred
          example: "2024-08-15"
        perpsRefereeEarningsE9:
          type: string
          description: Referee earnings from perps trading (e9 format)
          example: "1000000000"
        spotLPRefereeEarningsE9:
          type: string
          description: Referee earnings from spot LP (e9 format)
          example: "500000000"
        lendingRefereeEarningsE9:
          type: string
          description: Referee earnings from lending (e9 format)
          example: "300000000"
        perpsReferralEarningsE9:
          type: string
          description: Referral earnings from perps trading (e9 format)
          example: "1000000000"
        spotLPReferralEarningsE9:
          type: string
          description: Referral earnings from spot LP (e9 format)
          example: "500000000"
        lendingReferralEarningsE9:
          type: string
          description: Referral earnings from lending (e9 format)
          example: "300000000"
        perpsTotalEarningsE9:
          type: string
          description: Total earnings from perps trading (e9 format)
          example: "1000000000"
        spotLPTotalEarningsE9:
          type: string
          description: Total earnings from spot LP (e9 format)
          example: "500000000"
        lendingTotalEarningsE9:
          type: string
          description: Total earnings from lending (e9 format)
          example: "300000000"
        totalReferralEarningsE9:
          type: string
          description: Total earnings from referrals (e9 format)
          example: "800000000"
        totalRefereeEarningsE9:
          type: string
          description: Total earnings from referee activities (e9 format)
          example: "1200000000"
        totalEarningsE9:
          type: string
          description: Total earnings combining referrals and referee activities (e9 format)
          example: "2000000000"

    AffiliateLeaderDashboard:
      type: object
      required:
        - userAddress
        - parentAddress
        - perpsRank
        - spotRank
        - lendingRank
        - perpsTotalEarningsE9
        - spotTotalEarningsE9
        - lendingTotalEarningsE9
      properties:
        userAddress:
          type: string
          description: The user's wallet address
          example: "0x1234567890abcdef"
        name:
          type: string
          description: Name of the affiliate
          example: "John"
        parentAddress:
          type: string
          description: The parent affiliate's wallet address
          example: "0xabcdef1234567890"
        parentName:
          type: string
          description: Name of the parent affiliate
          example: "Jane"
        perpsRank:
          type: integer
          description: Ranking in perps trading category
          example: 5
        spotRank:
          type: integer
          description: Ranking in spot trading category
          example: 3
        lendingRank:
          type: integer
          description: Ranking in lending category
          example: 7
        perpsTotalEarningsE9:
          type: string
          description: Total earnings from perps trading (e9 format)
          example: "1000000000"
        spotTotalEarningsE9:
          type: string
          description: Total earnings from spot trading (e9 format)
          example: "500000000"
        lendingTotalEarningsE9:
          type: string
          description: Total earnings from lending (e9 format)
          example: "300000000"

paths:
  # Rewards endpoints
  /v1/rewards:
    # Get rewards information for the intervals; intervals define how frequent rewards are made available for claim or disbursement
    # Intervals are irrespective of the campaign or epoch's duration, multiple campaigns/epochs rewards can be distributed in a single interval
    get:
      tags:
        - Rewards
      operationId: getRewards
      summary: /rewards
      description: Returns the rewards earned by users for the intervals.
      security:
        - bearerAuth: []
      parameters:
        - name: intervalNumber
          in: query
          required: false
          description: Optionally specify interval number.
          schema:
            type: integer
            example: 3
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                description: List of epoch rewards objects.
                items:
                  $ref: "#/components/schemas/IntervalRewards"
  /v1/rewards/campaign:
    # Get rewards information for the epochs; epochs define how frequent rewards for a campaign are finalized and locked
    # Epochs are specific to a campaign
    get:
      tags:
        - Rewards
      operationId: getCampaignRewards
      summary: /rewards/campaign
      description: Returns the rewards earned by users for a specific campaign.
      parameters:
        - name: campaignName
          in: query
          required: true
          description: Specify the campaign name
          schema:
            type: string
            example: "TRADE_AND_EARN"
        - name: epochNumber
          in: query
          required: false
          description: Optionally specify epoch number.
          schema:
            type: integer
            example: 7
        - name: userAddress
          in: query
          required: true
          description: Specify wallet address.
          schema:
            type: string
            example: "0x1234567890abcdef"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CampaignRewards"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
  /v1/rewards/summary:
    # Get rewards information for all time
    get:
      tags:
        - Rewards
      operationId: getRewardsSummary
      summary: /rewards/summary
      description: Returns the all time rewards earned by users.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RewardsSummary"

  # Rewards metadata endpoints
  /v1/rewards/metadata/campaign:
    get:
      tags:
        - Rewards
      operationId: getRewardsCampaignMetadata
      summary: /rewards/metadata/campaign
      description: Returns the metadata for the rewards campaigns.
      parameters:
        - name: campaignName
          in: query
          required: false
          description: Specify the campaign name
          schema:
            type: string
            example: "TRADE_AND_EARN"
        - name: Status
          in: query
          required: false
          description: Optionally specify the status of the campaigns.
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
            default: ACTIVE
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                description: List of campaign metadata objects.
                items:
                  $ref: "#/components/schemas/CampaignMetadata"

  /v1/rewards/metadata/epoch:
    get:
      tags:
        - Rewards
      operationId: getRewardsEpochMetadata
      summary: /rewards/metadata/epoch
      description: Returns the latest or next epoch epoch for campaign.
      parameters:
        - name: campaignName
          in: query
          required: false
          description: Specify the campaign name
          schema:
            type: string
            example: "TRADE_AND_EARN"
        - name: epoch
          in: query
          required: false
          description: Specify the string "next" or "latest".
          schema:
            type: string
            enum: ["next", "latest"]
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                description: List of campaign metadata objects.
                items:
                  $ref: "#/components/schemas/EpochMetadata"

  /v1/rewards/metadata/epoch/configs:
    get:
      tags:
        - Rewards
      operationId: getRewardsEpochConfigMetadata
      summary: /rewards/metadata/epoch/configs
      description: Returns the latest epoch configs for the campaigns.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                description: List of campaign metadata objects.
                items:
                  $ref: "#/components/schemas/EpochConfigs"

  /v1/rewards/metadata/interval:
    get:
      tags:
        - Rewards
      operationId: getRewardsIntervalMetadata
      summary: /rewards/metadata/interval
      description: Returns the interval metadata for provided parameters.
      parameters:
        - name: interval
          in: query
          required: false
          description: Either specify an interval number or the string "next" or "latest".
          schema:
            type: integer
            example: 2
          examples:
            numberExample:
              summary: Interval Number
              value: 2
            stringExample:
              summary: Latest or Next Interval
              value: next

      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                description: List of campaign metadata objects.
                items:
                  $ref: "#/components/schemas/IntervalMetadata"

  /v1/rewards/affiliate:
    get:
      tags:
        - Rewards
      operationId: getAffiliateMetadata
      summary: /rewards/affiliate
      description: Returns the affiliate metadata.
      parameters:
        - name: userAddress
          in: query
          required: true
          description: Specify wallet address.
          schema:
            type: string
            example: "0x1234567890abcdef"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AffiliateMetadata"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "address not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /v1/rewards/affiliate/onboard:
    post:
      tags:
        - Rewards
      operationId: onboardAffiliate
      summary: /rewards/affiliate/onboard
      description: Submit an application to become an affiliate.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                parentReferralCode:
                  type: string
                  nullable: true
                  description: Referral code of the parent affiliate
                  example: "ABC123"
                name:
                  type: string
                  description: Name of the applicant
                  example: "John"
                email:
                  type: string
                  format: email
                  description: Email address of the applicant
                  example: "john.doe@example.com"
                socialUserNames:
                  type: object
                  description: Map of social media usernames
                  properties:
                    twitter:
                      type: string
                      description: Twitter username
                      example: "@johndoe"
                    instagram:
                      type: string
                      description: Instagram username
                      example: "@johndoe"
                    youtube:
                      type: string
                      description: YouTube channel name
                      example: "JohnDoeChannel"
                    tiktok:
                      type: string
                      description: TikTok username
                      example: "@johndoe"
      responses:
        "200":
          description: Application submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AffiliateOnboardResponse"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "address not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /v1/rewards/affiliate/feeConfig:
    post:
      tags:
        - Rewards
      operationId: updateAffiliateFeeConfig
      summary: /rewards/affiliate/feeConfig
      description: Update the fee config for an affiliate.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cashback
              properties:
                cashback:
                  type: integer
                  description: Cashback amount to give to the referees
                  example: 10
      responses:
        "200":
          description: Cashback request processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AffiliateMetadata"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "address not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "500":
          description: "internal server error"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /v1/rewards/affiliate/onboard/referee:
    post:
      tags:
        - Rewards
      operationId: onboardReferee
      summary: /rewards/affiliate/onboard/referee
      description: Onboard a referee with a referral code.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  description: Referral code of the parent affiliate
                  example: "ABC123"
      responses:
        "200":
          description: Referee onboarding response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefereeOnboardResponse"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "parent referral code not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "400":
          description: "referral code is required"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "412":
          description: "parent affiliate is not active"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "409":
          description: "referee already exists"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /v1/rewards/affiliate/summary:
    get:
      tags:
        - Rewards
      operationId: getAffiliateSummary
      summary: /rewards/affiliate/summary
      description: Returns performance summary for an affiliate including total referrals, earnings, and rankings.
      parameters:
        - name: userAddress
          in: query
          required: true
          description: Specify wallet address.
          schema:
            type: string
            example: "0x1234567890abcdef"
      responses:
        "200":
          description: Successful response of affiliate summary
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AffiliateSummary"
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "address not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /v1/rewards/affiliate/overview:
    get:
      tags:
        - Rewards
      operationId: getAffiliateOverview
      summary: /rewards/affiliate/overview
      description: Returns detailed earnings breakdown for an affiliate users earnings (including perps, spot LP, lending), referral earnings, and total earnings.
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve in a paginated response
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: The page size for pagination
          schema:
            type: integer
            default: 500
            maximum: 1000
            minimum: 1
            example: 500
        - name: sortBy
          in: query
          required: false
          description: The category to sort earnings by
          schema:
            type: string
            enum:
              - refreeEarnings
              - referralEarnings
              - totalEarnings
            example: "referralEarnings"
            default: "totalEarnings"
        - name: sortOrder
          in: query
          required: false
          description: The order to sort earnings by
          schema:
            type: string
            enum:
              - asc
              - desc
          example: "desc"
        - name: search
          in: query
          required: false
          description: The name/address of the user to filter by
          schema:
            type: string
            example: "John"
        - name: userAddress
          in: query
          required: true
          description: Specify wallet address.
          schema:
            type: string
            example: "0x1234567890abcdef"
        - name: minEarningsE9
          in: query
          required: false
          description: The minimum earnings to filter by
          schema:
            type: string
            example: "1000000"
            default: "0"
      responses:
        "200":
          description: Successful response array of affiliate overview objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AffiliateOverview"
                  total:
                    type: integer
                    description: Total number of records
                    example: 100
                  limit:
                    type: integer
                    description: The page size for pagination
                    example: 500
                  page:
                    type: integer
                    description: The page number for pagination
                    example: 1
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "address not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /v1/rewards/affiliate/intervalOverview:
    get:
      tags:
        - Rewards
      operationId: getAffiliateIntervalOverview
      summary: /rewards/affiliate/intervalOverview
      description: Returns detailed earnings breakdown for an affiliate by interval, ordered by interval number in descending order.
      parameters:
        - name: userAddress
          in: query
          required: true
          description: The address of the user to get interval overview for
          schema:
            type: string
            example: "0x1234567890abcdef"
        - name: page
          in: query
          required: false
          description: The page number to retrieve in a paginated response
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: The page size for pagination
          schema:
            type: integer
            default: 500
            maximum: 1000
            minimum: 1
            example: 500
      responses:
        "200":
          description: Successful response array of affiliate interval overview objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AffiliateIntervalOverview"
                  total:
                    type: integer
                    description: Total number of records
                    example: 100
                  limit:
                    type: integer
                    description: The page size for pagination
                    example: 500
                  page:
                    type: integer
                    description: The page number for pagination
                    example: 1
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "address not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"

  /v1/rewards/affiliate/leaderDashboard:
    get:
      tags:
        - Rewards
      operationId: getAffiliateLeaderDashboard
      summary: /rewards/affiliate/leaderDashboard
      description: Returns rankings and earnings for affiliates, sorted by the specified category.
      parameters:
        - name: sortBy
          in: query
          required: false
          description: The category to sort rankings by
          schema:
            type: string
            enum:
              - perpsRank
              - lendingRank
              - spotRank
            example: "perpsRank"
            default: "perpsRank"
        - name: sortOrder
          in: query
          required: false
          description: The order to sort rankings by
          schema:
            type: string
            enum:
              - asc
              - desc
          example: "desc"
        - name: page
          in: query
          required: false
          description: The page number to retrieve in a paginated response
          schema:
            type: integer
            default: 1
            minimum: 1
            example: 1
        - name: limit
          in: query
          required: false
          description: The page size for pagination
          schema:
            type: integer
            default: 500
            maximum: 1000
            minimum: 0
            example: 500
        - name: search
          in: query
          required: false
          description: The name/address of the user to filter by
          schema:
            type: string
            example: "John"
      responses:
        "200":
          description: Successful response array of affiliate ranking and earnings objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/AffiliateLeaderDashboard"
                  total:
                    type: integer
                    description: Total number of records
                    example: 100
                  limit:
                    type: integer
                    description: The page size for pagination
                    example: 500
                  page:
                    type: integer
                    description: The page number for pagination
                    example: 1
        "401":
          description: "unauthorized access"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "404":
          description: "address not found"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        "400":
          description: "request missing required parameters"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
