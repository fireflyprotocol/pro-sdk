openapi: 3.0.3
info:
  title: Bluefin Trade API
  version: 1.0.0
tags:
  - name: Trade
    description: "Bluefin Trade API"

servers:
  - url: https://trade.api.{env}.bluefin.io
    variables:
      env:
        default: sui-staging
        enum:
          - sui-staging
          - sui-prod
    
components:
  schemas:
    OrderSide:
      type: string
      enum:
        - LONG
        - SHORT
        - UNSPECIFIED
      description: Side of the order

    AccountAuthorizationRequest:
      type: object
      properties:
        signedFields:
          properties:
            accountAddress:
              type: string
              description: The account address of the parent account that is authorizing/deauthorizing this account
            authorizedAccountAddress:
              type: string
              description: The address of the account that should be authorized/deauthorized
            salt:
              type: string
              description: The random generated salt. Should always be a number
              example: "123335432"
            idsId:
              type: string
              description: the ID of the internal datastore for the target network
              example: "ids_id"
            signedAtMillis:
              type: integer
              format: int64
              description: The timestamp when the request was signed
              example: 1234567856
          required:
            - accountAddress
            - authorizedAccountAddress
            - salt
            - idsId
            - signedAtMillis
        signature:
          type: string
          description: The signature of the request, encoded from the signedFields
        alias:
          type: string
          description: The (optional) alias of the account that is being authorized or deauthorized
          example: "John Doe"
      required:
        - signedFields
        - signature

    CreateOrderRequestSignedFields:
      type: object
      properties:
        symbol:
          type: string
          description: The symbol of the perpetual for which to create the order
        accountAddress:
          type: string
          description: The account address of the order. May be an account user is authorized for.
        priceE9:
          type: string
          description: The price in base e9 of the asset to be traded. Should always be a number
          example: 452400000
        quantityE9:
          type: string
          description: The quantity in base e9 of the asset to be traded. Should always be a number
          example: 452400000
        side:
          $ref: '#/components/schemas/OrderSide'
        leverageE9:
          type: string
          description: The leverage in base e9 of the order to be traded. Should always be a number
          example: 4000000000
        isIsolated:
          type: boolean
          description: Is this order isolated or cross margin. Note market must be set to the same mode.
          default: false
        salt:
          type: string
          description: The random generated SALT. Should always be a number
          example: "123335432"
        idsId:
          type: string
          description: the ID of the internal datastore for the target network
          example: "ids_id"
        expiresAtMillis:
          type: integer
          format: int64
          description: timestamp in millis at which order will expire. Defaults to 1 month for LIMIT orders if not provided
          example: 12345665432
        signedAtMillis:
          type: integer
          format: int64
          description: The timestamp in millis at which the request was signed
          example: 1234567856
      required:
        - symbol
        - accountAddress
        - priceE9
        - quantityE9
        - side
        - leverageE9
        - isIsolated
        - salt
        - idsId
        - expiresAtMillis
        - signedAtMillis
            

    CreateStandbyOrderRequest:
      type: object
      properties:
        signedFields:
          $ref: '#/components/schemas/CreateOrderRequestSignedFields'
        signature:
          type: string
        clientOrderId:
          type: string
        type:
          $ref: './common.yaml#/components/schemas/OrderType'
        reduceOnly:
          type: boolean
        postOnly:
          type: boolean
          default: false
        timeInForce:
          $ref: './common.yaml#/components/schemas/OrderTimeInForce'
        triggerPriceE9:
          type: string
          example: "300000000"
        selfTradePreventionType:
          $ref: './common.yaml#/components/schemas/SelfTradePreventionType'
        orderHash:
          type: string
          example: "0x123abc"
        signerAddress:
          type: string
          example: "0x123abc"
      required:
        - orderHash
        - signedFields
        - signature
        - type
        - reduceOnly
        - postOnly
        - timeInForce
        - triggerPriceE9
        - selfTradePreventionType
        - signerAddress
    CreateOrderRequest:
      type: object
      properties:
        signedFields:
          $ref: '#/components/schemas/CreateOrderRequestSignedFields'
        signature:
          type: string
          description: The signature of the request, encoded from the signedFields
        clientOrderId:
          type: string
          description: The client-defined unique identifier of this order used for lookup. This should always be unique; however, the server will not gurantee this or impose any checks.
        type:
          $ref: './common.yaml#/components/schemas/OrderType'
        reduceOnly:
          type: boolean
          description: Is this order to only reduce a position? Default false
        postOnly:
          type: boolean
          description: If set to TRUE, the order can only be a maker order
          default: false
        timeInForce:
          allOf:
            - $ref: './common.yaml#/components/schemas/OrderTimeInForce'
          description: | 
            Omit or set to null for market orders; otherwise, choose a valid time-in-force value.
            GTT: Good Til Time
            
            IOC: Immediate Or Cancel
            
            FOK: Fill Or Kill
        triggerPriceE9:
          type: string
          description: Trigger price in base e9 for stop orders. This should always be a number
          example: 300000000
        selfTradePreventionType:
          $ref: './common.yaml#/components/schemas/SelfTradePreventionType'
      required:
        - signedFields
        - signature
        - type
        - reduceOnly

    WithdrawRequest:
      type: object
      properties:
        signedFields:
          type: object
          properties:
            assetSymbol:
              type: string
              description: Asset symbol of the withdrawn asset
              example: ETH
            accountAddress:
              type: string
              description: The Account Address from which to withdraw assets
              example: 0x000000000ABC
            amountE9:
              type: string
              description: The amount in e9 of the asset that the User will withdraw from their account
              example: 1000000000
            salt:
              type: string
              description: A uniqueness modifier for the request. This is added to guarantee uniqueness of the request. Usually a mix of timestamp and a random number
              example: "432558574839487"
            edsId:
              type: string
              description: the ID of the external datastore for the target network
              example: "eds_id"
            signedAtMillis:
              type: integer
              format: int64
              description: The timestamp in milliseconds when the HTTP Request payload has been signed
              example: 12454325432
          required:
            - assetSymbol
            - accountAddress
            - amountE9
            - salt
            - edsId
            - signedAtMillis
        signature:
          type: string
          description: The signature of the request, encoded from the signedFields
      required:
        - signedFields
        - signature

    CancelOrdersRequest:
      description: Cancelling Orders for a specific symbol. If order hashes are not specified, all orders are canceled for this symbol
      properties:
        symbol:
          type: string
          description: The symbol of the perpetual for which to cancel orders.
          example: 0x0000ABC
        orderHashes:
          type: array
          items:
            type: string
          description: List of order hashes of the orders to be cancelled. All orders must belong to accountAddress. Max 10 order hashes
          example: [ order_hash1, order_hash2 ]
      required:
        - symbol

    CancelOrdersResponse:
      description: Response to a request to cancel orders.
      properties:
        orderHashes:
          description: The order hashes of the cancelled orders.
          type: array
          items:
            type: string
      required:
        - orderHashes

    AccountPositionLeverageUpdateRequest:
      properties:
        signedFields:
          properties:
            accountAddress:
              type: string
              description: The Account Address from which to update leverage
              example: 0x000000000ABC
            symbol:
              type: string
              description: Symbol of the perpetual of the positions for which to update the leverage
              example: 0x000ABC
            leverageE9:
              type: string
              description: The leverage to set for the account positions (Must be a number in base e9)
              example: "1000000000"
            salt:
              type: string
              description: The random generated SALT. Should always be a number
              example: "123335432"
            idsId:
              type: string
              description: the ID of the internal datastore for the target network
              example: "ids_id"
            signedAtMillis:
              type: integer
              format: int64
              description: The timestamp in millis at which the request was signed
              example: 1234567856
          required:
            - accountAddress
            - symbol
            - leverageE9
            - salt
            - idsId
            - signedAtMillis
        signature:
          type: string
          description: The signature of the request, encoded from the signedFields
      required:
        - signedFields
        - signature

    OpenOrderResponse:
      properties:
        orderHash:
          type: string
          description: The Order Hash, which is the default way to uniquely identify an order in the system
        clientOrderId:
          type: string
          description: The Client Order ID, which is used a unique identifier for an order, provided by the client, in case of proprietary order management systems
          example: company1_order1
        symbol:
          type: string
          description: The market symbol
        accountAddress:
          type: string
          description: The account address of the order. May be an account user is authorized for.
        signerAddress:
          type: string
          description: The signer address of the order. May be an account user is authorized for.
        priceE9:
          type: string
          description: The price in base e9 of the asset to be traded. Should always be a number
          example: 452400000
        quantityE9:
          type: string
          description: The quantity in base e9 of the asset to be traded. Should always be a number
          example: 452400000
        side:
          $ref: '#/components/schemas/OrderSide'
        leverageE9:
          type: string
          description: The leverage in base e9  of the order to be traded. Should always be a number
          example: 4000000000
        isIsolated:
          type: boolean
          description: Is this order isolated or cross margin. Note market must be set to the same mode.
          default: false
        salt:
          type: string
          description: The random generated SALT. Should always be a number
          example: "123335432"
        expiresAtMillis:
          type: integer
          format: int64
          description: Unix timestamp in millis at which order will expire. Defaults to 1 month for LIMIT orders if not provided
          example: 123456734567
        signedAtMillis:
          type: integer
          format: int64
          description: The timestamp in millis at which the request was signed
          example: 1234567856
        type:
          $ref: './common.yaml#/components/schemas/OrderType'
        reduceOnly:
          type: boolean
          description: Is this order to only reduce a position? Default false
          default: false
        postOnly:
          type: boolean
          description: If set to TRUE, the order can only be a maker order
          default: false
        timeInForce:
          $ref: './common.yaml#/components/schemas/OrderTimeInForce'
        triggerPriceE9:
          type: string
          description: Trigger price in base e9 for stop orders. This should always be a number
          example: 452400000
        filledQuantityE9:
          type: string
          description: The quantity in base e9 of the asset currently filled. This should always be a number
          example: 300000000
        status:
          $ref: './common.yaml#/components/schemas/OrderStatus'
        selfTradePreventionType:
          $ref: './common.yaml#/components/schemas/SelfTradePreventionType'
        orderTimeAtMillis:
          type: integer
          format: int64
          description: The timestamp in millis when the order was opened
        updatedAtMillis:
          type: integer
          format: int64
          description: The timestamp in millis that this order was last updated (including status updates)
      required:
        - orderHash
        - symbol
        - accountAddress
        - signerAddress
        - priceE9
        - quantityE9
        - side
        - leverageE9
        - isIsolated
        - salt
        - expiresAtMillis
        - signedAtMillis
        - type
        - reduceOnly
        - postOnly
        - timeInForce
        - filledQuantityE9
        - status
        - selfTradePreventionType
        - orderTimeAtMillis
        - updatedAtMillis

    AdjustIsolatedMarginRequest:
      properties:
        signedFields:
          properties:
            idsId:
              type: string
              description: the ID of the internal datastore for the target network
              example: "0x000ABC"
            accountAddress:
              type: string
              description: The account address of the account for which to adjust margin
            symbol:
              type: string
              description: The symbol of the isolated position for which to adjust margin
            operation:
              $ref: '#/components/schemas/AdjustMarginOperation'
            quantityE9:
              type: string
              description: The quantity of margin to adjust for the isolated position
            salt:
              type: string
              description: The random generated SALT. Should always be a number
              example: "123335432"
            signedAtMillis:
              type: integer
              format: int64
              description: The timestamp in millis at which the request was signed
              example: 1234567856
          required:
            - idsId
            - accountAddress
            - symbol
            - operation
            - quantityE9
            - salt
            - signedAtMillis

        signature:
          type: string
          description: The signature of the request, encoded from the signedFields
      required:
        - signedFields
        - signature

    AdjustMarginOperation:
      type: string
      enum:
        - "ADD"
        - "SUBTRACT"
      description: The operation to perform on the margin

    CreateOrderResponse:
      type: object
      properties:
        orderHash:
          type: string
          description: The unique identifier of this order, to be used as a lookup key
      required:
        - orderHash

  securitySchemes:
    bearerAuth:
      type: apiKey
      in: header
      name: Authorization
      description: url base64 encoded JWT token payload.

paths:
  /api/v1/trade/orders:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Trade
      operationId: postCreateOrder
      summary: /trade/orders
      description: Submit a new order for execution.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: Order creation successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '202':
          description: Order creation submitted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '400':
          description: Bad Request. The request was invalid or malformed.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    errorCode: INVALID_REQUEST
                    message: The provided request is invalid.
        '401':
          description: Unauthorized. Authentication is required or invalid. Signature is invalid
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '404':
          description: Not Found. The requested account was not found.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '429':
          description: Too Many Requests. The request was rate limited.
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

        '503':
           description: Service Unavailable. The service is currently unavailable.
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/Error'

  /api/v1/trade/orders/cancel:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Trade
      operationId: cancelOrders
      summary: /trade/orders/cancel
      description: |
        Cancel orders for a market using order hashes.
        - May be a single order hash or a list of order hashes.
        - All orders must belong to the same account.
        - If no order hashes are specified, then will cancel all orders for the given market

        - All orders being cancelled by request will receive the same time priority.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrdersRequest'
      responses:
        '202':
          description: Order cancellation submitted successfully.
        '400':
          description: Bad Request. Invalid body parameters.
        '401':
          description: Unauthorized. Authentication is required or invalid.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '429':
          description: Too Many Requests. The request was rate limited.
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

        '503':
           description: Service Unavailable. The service is currently unavailable.
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/Error'

  /api/v1/trade/orders/cancel/standby:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Trade
      operationId: cancelStandbyOrders
      summary: /trade/orders/cancel/standby
      description: |
        Cancel orders in standby for a market using order hashes.
        - May be a single order hash or a list of order hashes.
        - All orders must belong to the same account.
        - If no order hashes are specified, then will cancel all orders for the given market
        - All orders being cancelled by request will receive the same time priority.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOrdersRequest'
      responses:
        '200':
          description: Orders cancelled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelOrdersResponse'
        '400':
          description: Bad Request. Invalid body parameters.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '401':
          description: Unauthorized. Authentication is required or invalid.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '429':
          description: Too Many Requests. The request was rate limited.
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

        '503':
           description: Service Unavailable. The service is currently unavailable.
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/Error'


  /api/v1/trade/accounts/authorize:
    put:
      tags:
        - Trade
      operationId: putAuthorizeAccount
      summary: /trade/accounts/authorize
      description: Authorizes an account to trade, perform liquidations and more, on behalf of another account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountAuthorizationRequest'
      responses:
        '202':
          description: Authorize Account request submitted successfully
        '400':
          description: Bad Request. The request was invalid or malformed.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    errorCode: INVALID_REQUEST
                    message: The provided request is invalid.
        '401':
          description: Unauthorized. Authentication is required or invalid. Signature is invalid
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

        '503':
           description: Service Unavailable. The service is currently unavailable.
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/Error'

  /api/v1/trade/accounts/deauthorize:
    put:
      tags:
        - Trade
      operationId: putDeauthorizeAccount
      summary: /trade/accounts/deauthorize
      description: Deauthorizes an account to trade, perform liquidations and more, on behalf of another account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountAuthorizationRequest'
      responses:
        '202':
          description: Deauthorize Account request submitted successfully
        '400':
          description: Bad Request. The request was invalid or malformed.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    errorCode: INVALID_REQUEST
                    message: The provided request is invalid.
        '401':
          description: Unauthorized. Authentication is required or invalid. Signature is invalid
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

        '503':
           description: Service Unavailable. The service is currently unavailable.
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/Error'

  /api/v1/trade/leverage:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Trade
      operationId: putLeverageUpdate
      summary: /trade/leverage
      description: Updates leverage for positions of a given market and closes all open orders for that market.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPositionLeverageUpdateRequest'
      responses:
        '202':
          description: Leverage update request sent successfully.
        '400':
          description: Bad Request. The request was invalid or malformed.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    errorCode: INVALID_REQUEST
                    message: The provided request is invalid.
        '401':
          description: Unauthorized. Authentication is required or invalid. Signature is invalid
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '404':
          description: Not Found. The requested account was not found.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

        '503':
           description: Service Unavailable. The service is currently unavailable.
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/Error'

  /api/v1/trade/openOrders:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Trade
      operationId: getOpenOrders
      summary: /trade/openOrders
      description: Retrieve details of open orders for a specific account.
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          description: Filter by specific perpetual symbol (optional)
          example: "ETH-PERP"
      responses:
        '200':
          description: Open orders retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenOrderResponse'
        '400':
          description: Bad Request. The request was invalid or malformed.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    errorCode: INVALID_REQUEST
                    message: The provided request is invalid.
        '401':
          description: Unauthorized. Authentication is required or invalid.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '404':
          description: Not Found. The requested account address was not found.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
  
  /api/v1/trade/standbyOrders:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Trade
      operationId: getStandbyOrders
      summary: /trade/standbyOrders
      description: Retrieve details of orders in standby for a specific account.
      parameters:
        - in: query
          name: symbol
          schema:
            type: string
          description: Filter by specific perpetual symbol (optional)
          example: "ETH-PERP"
      responses:
        '200':
          description: Orders in standby retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenOrderResponse'
        '400':
          description: Bad Request. The request was invalid or malformed.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    errorCode: INVALID_REQUEST
                    message: The provided request is invalid.
        '401':
          description: Unauthorized. Authentication is required or invalid.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

  /api/v1/trade/withdraw:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Trade
      operationId: postWithdraw
      summary: /trade/withdraw
      description: Initiates a withdraw action to remove some amount of funds from a user's account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WithdrawRequest'
      responses:
        '202':
          description: Withdraw request submitted successfully.
        '400':
          description: Bad Request. The request was invalid or malformed.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    errorCode: INVALID_REQUEST
                    message: The provided request is invalid.
        '401':
          description: Unauthorized. Authentication is required or invalid. Signature is invalid
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '404':
          description: Not Found. The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '429':
          description: Too Many Requests. The request was rate limited.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

        '503':
           description: Service Unavailable. The service is currently unavailable.
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/Error'


  /api/v1/trade/adjustIsolatedMargin:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Trade
      operationId: putAdjustIsolatedMargin
      summary: /trade/adjustIsolatedMargin
      description: Adjust margin for an isolated position on a specific market.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdjustIsolatedMarginRequest'
      responses:
        '202':
          description: Adjust margin request sent successfully.
        '400':
          description: Bad Request. The request was invalid or malformed.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
              examples:
                InvalidRequest:
                  value:
                    errorCode: INVALID_REQUEST
                    message: The provided request is invalid.
        '401':
          description: Unauthorized. Authentication is required or invalid. Signature is invalid
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '404':
          description: Not Found. The requested account was not found.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json:
              schema:
                $ref: './common.yaml#/components/schemas/Error'

        '503':
           description: Service Unavailable. The service is currently unavailable.
           content:
             application/json:
               schema:
                 $ref: './common.yaml#/components/schemas/Error'
