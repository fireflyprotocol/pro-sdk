openapi: '3.0.3'
info:
  title: Bluefin Auth API
  version: 1.0.0
tags:
  - name: Auth
    description: "Bluefin Auth API"

servers:
  - url: https://auth.api.{env}.bluefin.io
    variables:
      env:
        default: sui-staging
        enum:
          - sui-staging
          - sui-prod

components:
  responses:
    DefaultError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: './common.yaml#/components/schemas/Error'
  schemas:
    JwksResponse:
      type: object
      additionalProperties: true
    LoginRequest:
      type: object
      description: |
        User is expected to sign this payload and sends is signature in login api as header and payload itself in request body
      properties:
        accountAddress:
          type: string
          description: The address of the account.
        signedAtMillis:
          type: integer
          format: int64
          description: The timestamp in millis when the login was signed.
        audience:
          type: string
          description: The intended audience of the login request.
      required:
        - accountAddress
        - signedAtMillis
        - audience
    LoginResponse:
      type: object
      required:
        - accessToken
        - accessTokenValidForSeconds
        - refreshToken
        - refreshTokenValidForSeconds
      properties:
        accessToken:
          type: string
        accessTokenValidForSeconds:
          type: integer
          format: int64
          x-go-type: int64
        refreshToken:
          type: string
        refreshTokenValidForSeconds:
          type: integer
          format: int64
          x-go-type: int64
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          minLength: 1
    RefreshTokenResponse:
      type: object
      required:
        - accessToken
        - accessTokenValidForSeconds
        - refreshToken
        - refreshTokenValidForSeconds
      properties:
        accessToken:
          type: string
        accessTokenValidForSeconds:
          type: integer
          format: int64
          x-go-type: int64
        refreshToken:
          type: string
        refreshTokenValidForSeconds:
          type: integer
          format: int64
          x-go-type: int64

    ZKLoginZKPRequest:
      type: object
      properties:
        network:
          type: string
          description: The network to use (e.g., "mainnet", "testnet").
        ephemeralPublicKey:
          type: string
          description: The ephemeral public key for the ZK proof.
        maxEpoch:
          type: integer
          description: The maximum epoch for the ZK proof.
        randomness:
          type: string
          description: Randomness value for the ZK proof.
      required:
        - ephemeralPublicKey
        - maxEpoch
        - randomness
    
    ProofPoints:
      type: object
      properties:
        a:
          type: array
          items:
            type: string
          description: Point A of the proof.
        b:
          type: array
          items:
            type: array
            items:
              type: string
          description: Point B of the proof.
        c:
          type: array
          items:
            type: string
          description: Point C of the proof.
      required:
        - a
        - b
        - c
      description: The generated zero-knowledge proof points.

    IssBase64Details:
      type: object
      properties:
        value:
          type: string
          description: Base64 encoded ISS details value.
        indexMod4:
          type: integer
          description: Index modulo 4 for the ISS details.
      required:
        - value
        - indexMod4
      description: Base64 encoded ISS details with index.

    ZKLoginZKPResponse:
      type: object
      properties:
        proofPoints:
          $ref: '#/components/schemas/ProofPoints'
        issBase64Details:
          $ref: '#/components/schemas/IssBase64Details'
        headerBase64:
          type: string
          description: Base64 encoded header information.
        addressSeed:
          type: string
          description: The address seed used in the proof.
      required:
        - addressSeed

    ZKLoginUserDetailsResponse:
      type: object
      properties:
        salt:
          type: string
          description: The zkLogin user salt.
        address:
          type: string
          description: The zkLogin user's address.
        publicKey:
          type: string
          format: string
          description: The zkLogin user's public key.
      required:
        - salt
        - address
        - publicKey
paths:
  /auth/zklogin:
    get:
      tags:
        - Auth
      summary: /auth/zklogin
      description: ZK Login User Details
      operationId: GetZkLoginUserDetails
      parameters:
        - in: header
          name: zklogin-jwt
          description: The JWT of the user signed in with zkLogin.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response with zkLogin user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZKLoginUserDetailsResponse'
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"  


  /auth/zklogin/zkp:
    post:
      tags:
        - Auth
      summary: /auth/zklogin/zkp
      operationId: PostZkLoginZkp
      parameters:
        - in: header
          name: zklogin-jwt
          description: The JWT of the user signed in with zkLogin.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZKLoginZKPRequest'
      responses:
        '200':
          description: Successful response with ZK proof result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZKLoginZKPResponse'
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"  

  /auth/jwks:
    get:
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwksResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /auth/token:
    post:
      tags:
        - Auth
      description: 'login with token'
      parameters:
        - name: payloadSignature
          in: header
          required: true
          schema:
            type: string
        - name: refreshTokenValidForSeconds
          description: "The number of seconds the refresh token is valid for. If not provided, the default is 30 days."
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 2592000
            x-go-type: int64
        - name: readOnly
          in: query
          required: false
          schema:
            type: boolean
            description: "If not supplied defaults to false"
            default: false
      requestBody:
        required: true
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: "bad signature"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '401':
          description: "invalid signature"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '403':
          description: "invalid audience"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        default:
          $ref: '#/components/responses/DefaultError'
  /auth/v2/token:
    post:
      tags:
        - Auth
      description: 'login compatible with BCS payload with intent bytes'
      parameters:
        - name: payloadSignature
          in: header
          required: true
          schema:
            type: string
        - name: refreshTokenValidForSeconds
          description: "The number of seconds the refresh token is valid for. If not provided, the default is 30 days."
          in: query
          required: false
          schema:
            type: integer
            format: int64
            x-go-type: int64
            default: 2592000
        - name: readOnly
          in: query
          required: false
          schema:
            type: boolean
            description: "If not supplied defaults to false"
            default: false
      requestBody:
        required: true
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: "bad signature"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '401':
          description: "invalid signature"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '403':
          description: "invalid audience"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        default:
          $ref: '#/components/responses/DefaultError'
  /auth/token/refresh:
    put:
      tags:
        - Auth
      description: Retrieves a new auth token for an account. Expiry is set to 5 min.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: "invalid signature"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '400':
          description: "missing refresh token in request"
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "./common.yaml#/components/schemas/Error"
        default:
          $ref: '#/components/responses/DefaultError'
