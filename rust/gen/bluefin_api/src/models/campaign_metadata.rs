/*
 * Bluefin API
 *
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CampaignMetadata {
    #[serde(rename = "Status")]
    pub status: Status,
    /// Name of the campaign.
    #[serde(rename = "CampaignName")]
    pub campaign_name: String,
    /// Name of the parent campaign.
    #[serde(rename = "ParentCampaignName")]
    pub parent_campaign_name: String,
    /// Time in milliseconds for campaign start date.
    #[serde(rename = "StartDate")]
    pub start_date: i32,
    /// Time in milliseconds for campaign end date.
    #[serde(rename = "EndDate")]
    pub end_date: i32,
}

impl CampaignMetadata {
    pub fn new(status: Status, campaign_name: String, parent_campaign_name: String, start_date: i32, end_date: i32) -> CampaignMetadata {
        CampaignMetadata {
            status,
            campaign_name,
            parent_campaign_name,
            start_date,
            end_date,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "INACTIVE")]
    Inactive,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

