/*
 * Bluefin API
 *
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AffiliateMetadata {
    /// The user's wallet address
    #[serde(rename = "userAddress")]
    pub user_address: String,
    /// The referral code of the parent affiliate
    #[serde(rename = "parentReferralCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_referral_code: Option<Option<String>>,
    /// The user's referral code if approved as an affiliate
    #[serde(rename = "referralCode", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub referral_code: Option<Option<String>>,
    /// The name of the affiliate
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The name of the parent affiliate
    #[serde(rename = "parentName", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_name: Option<Option<String>>,
    #[serde(rename = "fees", skip_serializing_if = "Option::is_none")]
    pub fees: Option<models::FeeConfigs>,
    /// Status of the affiliate application
    #[serde(rename = "status", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub status: Option<Option<Status>>,
    /// Indicates whether the user has traded or not
    #[serde(rename = "hasTraded")]
    pub has_traded: bool,
    /// Tier of the affiliate
    #[serde(rename = "tier", skip_serializing_if = "Option::is_none")]
    pub tier: Option<Tier>,
    /// Indicates whether the affiliate is an ember affiliate
    #[serde(rename = "isEmber", skip_serializing_if = "Option::is_none")]
    pub is_ember: Option<bool>,
}

impl AffiliateMetadata {
    pub fn new(user_address: String, has_traded: bool) -> AffiliateMetadata {
        AffiliateMetadata {
            user_address,
            parent_referral_code: None,
            referral_code: None,
            name: None,
            parent_name: None,
            fees: None,
            status: None,
            has_traded,
            tier: None,
            is_ember: None,
        }
    }
}
/// Status of the affiliate application
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "APPROVED")]
    Approved,
    #[serde(rename = "REJECTED")]
    Rejected,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}
/// Tier of the affiliate
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tier {
    #[serde(rename = "S")]
    S,
    #[serde(rename = "A")]
    A,
    #[serde(rename = "N")]
    N,
    #[serde(rename = "U")]
    U,
}

impl Default for Tier {
    fn default() -> Tier {
        Self::S
    }
}

