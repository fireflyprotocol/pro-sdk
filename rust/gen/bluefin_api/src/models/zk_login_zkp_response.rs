/*
 * Bluefin API
 *
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ZkLoginZkpResponse {
    #[serde(rename = "proofPoints", skip_serializing_if = "Option::is_none")]
    pub proof_points: Option<models::ProofPoints>,
    #[serde(rename = "issBase64Details", skip_serializing_if = "Option::is_none")]
    pub iss_base64_details: Option<models::IssBase64Details>,
    /// Base64 encoded header information.
    #[serde(rename = "headerBase64", skip_serializing_if = "Option::is_none")]
    pub header_base64: Option<String>,
    /// The address seed used in the proof.
    #[serde(rename = "addressSeed")]
    pub address_seed: String,
}

impl ZkLoginZkpResponse {
    pub fn new(address_seed: String) -> ZkLoginZkpResponse {
        ZkLoginZkpResponse {
            proof_points: None,
            iss_base64_details: None,
            header_base64: None,
            address_seed,
        }
    }
}

