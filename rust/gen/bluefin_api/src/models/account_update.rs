/*
 * Bluefin API
 *
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AccountUpdate : Account information for the data stream.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountUpdate {
    #[serde(rename = "tradingFees", skip_serializing_if = "Option::is_none")]
    pub trading_fees: Option<models::TradingFees>,
    /// Indicates if trading is enabled.
    #[serde(rename = "canTrade")]
    pub can_trade: bool,
    /// Indicates if deposits are enabled.
    #[serde(rename = "canDeposit")]
    pub can_deposit: bool,
    /// Indicates if withdrawals are enabled.
    #[serde(rename = "canWithdraw")]
    pub can_withdraw: bool,
    /// The total effective balance.
    #[serde(rename = "totalEffectiveBalanceE9")]
    pub total_effective_balance_e9: String,
    /// The total initial margin required.
    #[serde(rename = "totalInitialMarginRequiredE9")]
    pub total_initial_margin_required_e9: String,
    /// The initial margin required for open orders.
    #[serde(rename = "totalOpenOrderInitialMarginRequiredE9")]
    pub total_open_order_initial_margin_required_e9: String,
    /// The available initial margin.
    #[serde(rename = "initialMarginAvailableE9")]
    pub initial_margin_available_e9: String,
    /// The total maintenance margin required.
    #[serde(rename = "totalMaintenanceMarginRequiredE9")]
    pub total_maintenance_margin_required_e9: String,
    /// The available maintenance margin.
    #[serde(rename = "maintenanceMarginAvailableE9")]
    pub maintenance_margin_available_e9: String,
    /// The maintenance margin ratio.
    #[serde(rename = "accountMaintenanceMarginRatioE9")]
    pub account_maintenance_margin_ratio_e9: String,
    /// The account leverage.
    #[serde(rename = "accountLeverageE9")]
    pub account_leverage_e9: String,
    /// The total unrealized profit and loss.
    #[serde(rename = "totalUnrealizedPnlE9")]
    pub total_unrealized_pnl_e9: String,
    /// The total cross unrealized profit and loss.
    #[serde(rename = "totalCrossUnrealizedPnlE9")]
    pub total_cross_unrealized_pnl_e9: String,
    /// The timestamp of the last update in milliseconds.
    #[serde(rename = "updatedAtMillis")]
    pub updated_at_millis: i64,
    /// The list of assets.
    #[serde(rename = "assets")]
    pub assets: Vec<models::Asset>,
}

impl AccountUpdate {
    /// Account information for the data stream.
    pub fn new(can_trade: bool, can_deposit: bool, can_withdraw: bool, total_effective_balance_e9: String, total_initial_margin_required_e9: String, total_open_order_initial_margin_required_e9: String, initial_margin_available_e9: String, total_maintenance_margin_required_e9: String, maintenance_margin_available_e9: String, account_maintenance_margin_ratio_e9: String, account_leverage_e9: String, total_unrealized_pnl_e9: String, total_cross_unrealized_pnl_e9: String, updated_at_millis: i64, assets: Vec<models::Asset>) -> AccountUpdate {
        AccountUpdate {
            trading_fees: None,
            can_trade,
            can_deposit,
            can_withdraw,
            total_effective_balance_e9,
            total_initial_margin_required_e9,
            total_open_order_initial_margin_required_e9,
            initial_margin_available_e9,
            total_maintenance_margin_required_e9,
            maintenance_margin_available_e9,
            account_maintenance_margin_ratio_e9,
            account_leverage_e9,
            total_unrealized_pnl_e9,
            total_cross_unrealized_pnl_e9,
            updated_at_millis,
            assets,
        }
    }
}

