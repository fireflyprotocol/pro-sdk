/*
 * Bluefin API
 *
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserCampaignRewards {
    /// User address for the rewards earned data.
    #[serde(rename = "UserAddress")]
    pub user_address: String,
    /// Name of the campaign.
    #[serde(rename = "CampaignName")]
    pub campaign_name: String,
    /// Epoch number for the rewards earned data.
    #[serde(rename = "EpochNumber")]
    pub epoch_number: i32,
    /// Interval number for the rewards earned data.
    #[serde(rename = "IntervalNumber")]
    pub interval_number: i32,
    /// Market Symbol.
    #[serde(rename = "Symbol")]
    pub symbol: String,
    #[serde(rename = "Status")]
    pub status: Status,
    /// Total blue-perp token rewards earned in the epoch (e9 format).
    #[serde(rename = "BlueRewardsE9")]
    pub blue_rewards_e9: String,
    /// Total sui-perp token rewards earned in the epoch (e9 format).
    #[serde(rename = "SuiRewardsE9")]
    pub sui_rewards_e9: String,
    /// Total wal-perp rewards earned in the epoch (e9 format).
    #[serde(rename = "WalRewardsE9")]
    pub wal_rewards_e9: String,
    /// Total cash rewards earned in the epoch (e9 format).
    #[serde(rename = "CashRewardsE9")]
    pub cash_rewards_e9: String,
    /// Time in milliseconds for interval start date.
    #[serde(rename = "IntervalStartDate")]
    pub interval_start_date: i32,
    /// Time in milliseconds for interval end date.
    #[serde(rename = "IntervalEndDate")]
    pub interval_end_date: i32,
}

impl UserCampaignRewards {
    pub fn new(user_address: String, campaign_name: String, epoch_number: i32, interval_number: i32, symbol: String, status: Status, blue_rewards_e9: String, sui_rewards_e9: String, wal_rewards_e9: String, cash_rewards_e9: String, interval_start_date: i32, interval_end_date: i32) -> UserCampaignRewards {
        UserCampaignRewards {
            user_address,
            campaign_name,
            epoch_number,
            interval_number,
            symbol,
            status,
            blue_rewards_e9,
            sui_rewards_e9,
            wal_rewards_e9,
            cash_rewards_e9,
            interval_start_date,
            interval_end_date,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "NOT_STARTED")]
    NotStarted,
    #[serde(rename = "FINALIZED")]
    Finalized,
    #[serde(rename = "COOLDOWN")]
    Cooldown,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

