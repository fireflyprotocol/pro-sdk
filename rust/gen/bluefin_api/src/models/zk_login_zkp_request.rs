/*
 * Bluefin API
 *
 * Bluefin API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ZkLoginZkpRequest {
    /// The network to use (e.g., \"mainnet\", \"testnet\").
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The ephemeral public key for the ZK proof.
    #[serde(rename = "ephemeralPublicKey")]
    pub ephemeral_public_key: String,
    /// The maximum epoch for the ZK proof.
    #[serde(rename = "maxEpoch")]
    pub max_epoch: i32,
    /// Randomness value for the ZK proof.
    #[serde(rename = "randomness")]
    pub randomness: String,
}

impl ZkLoginZkpRequest {
    pub fn new(ephemeral_public_key: String, max_epoch: i32, randomness: String) -> ZkLoginZkpRequest {
        ZkLoginZkpRequest {
            network: None,
            ephemeral_public_key,
            max_epoch,
            randomness,
        }
    }
}

