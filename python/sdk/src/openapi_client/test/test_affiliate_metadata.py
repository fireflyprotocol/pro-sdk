# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.affiliate_metadata import AffiliateMetadata

class TestAffiliateMetadata(unittest.TestCase):
    """AffiliateMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AffiliateMetadata:
        """Test AffiliateMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AffiliateMetadata`
        """
        model = AffiliateMetadata()
        if include_optional:
            return AffiliateMetadata(
                user_address = '0x1234567890abcdef',
                parent_referral_code = 'ABC123',
                referral_code = 'AFF123',
                name = 'John',
                parent_name = 'Jane',
                fees = openapi_client.models.affiliate_metadata_fees.AffiliateMetadata_fees(
                    referral_perps_fee = '1000000000', 
                    subaffiliate_perps_earnings = '500000000', 
                    spot_lp_fee = '200000000', 
                    referral_spot_lp_fee = '150000000', 
                    referral_lending_rewards = '300000000', 
                    perps_fee_cashback = '250000000', ),
                status = 'APPROVED',
                has_traded = True,
                tier = 'S'
            )
        else:
            return AffiliateMetadata(
                user_address = '0x1234567890abcdef',
                has_traded = True,
        )
        """

    def testAffiliateMetadata(self):
        """Test AffiliateMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
