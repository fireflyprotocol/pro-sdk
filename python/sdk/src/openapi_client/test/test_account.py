# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.account import Account

class TestAccount(unittest.TestCase):
    """Account unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Account:
        """Test Account
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Account`
        """
        model = Account()
        if include_optional:
            return Account(
                trading_fees = openapi_client.models.trading_fees.TradingFees(
                    maker_fee_e9 = '1000000', 
                    taker_fee_e9 = '1000000', 
                    is_applied = True, ),
                can_trade = True,
                can_deposit = True,
                can_withdraw = False,
                total_effective_balance_e9 = '12000000000000',
                total_initial_margin_required_e9 = '1000000000',
                total_open_order_initial_margin_required_e9 = '1000000000',
                initial_margin_available_e9 = '1000000000',
                total_maint_margin_required_e9 = '5000000000',
                maint_margin_available_e9 = '1000000000',
                account_maint_margin_ratio_e9 = '1000000000',
                account_leverage_e9 = '1000000000',
                total_unrealized_pnl_e9 = '2000000000',
                total_cross_unrealized_pnl_e9 = '3000000000',
                last_updated_at_utc_millis = 1627872345678,
                assets = [
                    openapi_client.models.asset.Asset(
                        bank_address = '', 
                        quantity_e9 = '6000000000', 
                        effective_balance_e9 = '6000000000', 
                        max_withdraw_quantity_e9 = '3000000000', 
                        last_updated_at_utc_millis = 1627872345678, )
                    ],
                positions = [
                    openapi_client.models.position.Position(
                        market_address = '', 
                        avg_entry_price_e9 = '400000000000', 
                        leverage_e9 = '100000000000', 
                        liquidation_price_e9 = '0', 
                        mark_price_e9 = '667950671178', 
                        notional_value_e9 = '0', 
                        max_notional_value_e9 = '20000000000000', 
                        position_size_e9 = '100000000', 
                        unrealized_pnl_e9 = '-1000000000', 
                        position_side = 'LONG', 
                        initial_margin_e9 = '0', 
                        maint_margin_e9 = '0', 
                        is_isolated = True, 
                        isolated_margin_e9 = '1000000000', 
                        last_updated_at_utc_millis = 1733899435274, )
                    ]
            )
        else:
            return Account(
                trading_fees = openapi_client.models.trading_fees.TradingFees(
                    maker_fee_e9 = '1000000', 
                    taker_fee_e9 = '1000000', 
                    is_applied = True, ),
                can_trade = True,
                can_deposit = True,
                can_withdraw = False,
                total_effective_balance_e9 = '12000000000000',
                total_initial_margin_required_e9 = '1000000000',
                total_open_order_initial_margin_required_e9 = '1000000000',
                initial_margin_available_e9 = '1000000000',
                total_maint_margin_required_e9 = '5000000000',
                maint_margin_available_e9 = '1000000000',
                account_maint_margin_ratio_e9 = '1000000000',
                account_leverage_e9 = '1000000000',
                total_unrealized_pnl_e9 = '2000000000',
                total_cross_unrealized_pnl_e9 = '3000000000',
                last_updated_at_utc_millis = 1627872345678,
                assets = [
                    openapi_client.models.asset.Asset(
                        bank_address = '', 
                        quantity_e9 = '6000000000', 
                        effective_balance_e9 = '6000000000', 
                        max_withdraw_quantity_e9 = '3000000000', 
                        last_updated_at_utc_millis = 1627872345678, )
                    ],
                positions = [
                    openapi_client.models.position.Position(
                        market_address = '', 
                        avg_entry_price_e9 = '400000000000', 
                        leverage_e9 = '100000000000', 
                        liquidation_price_e9 = '0', 
                        mark_price_e9 = '667950671178', 
                        notional_value_e9 = '0', 
                        max_notional_value_e9 = '20000000000000', 
                        position_size_e9 = '100000000', 
                        unrealized_pnl_e9 = '-1000000000', 
                        position_side = 'LONG', 
                        initial_margin_e9 = '0', 
                        maint_margin_e9 = '0', 
                        is_isolated = True, 
                        isolated_margin_e9 = '1000000000', 
                        last_updated_at_utc_millis = 1733899435274, )
                    ],
        )
        """

    def testAccount(self):
        """Test Account"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
