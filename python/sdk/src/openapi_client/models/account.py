# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.asset import Asset
from openapi_client.models.authorized_wallet import AuthorizedWallet
from openapi_client.models.position import Position
from openapi_client.models.trading_fees import TradingFees
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Account
    """ # noqa: E501
    trading_fees: TradingFees = Field(alias="tradingFees")
    can_trade: StrictBool = Field(description="If the user can trade.", alias="canTrade")
    can_deposit: StrictBool = Field(description="If the current user can deposit to the account.", alias="canDeposit")
    can_withdraw: StrictBool = Field(description="If the current user can withdraw from the account.", alias="canWithdraw")
    cross_effective_balance_e9: StrictStr = Field(description="Total effective balance in USD (e9 format).", alias="crossEffectiveBalanceE9")
    cross_margin_required_e9: StrictStr = Field(description="The sum of initial margin required across all cross positions (e9 format).", alias="crossMarginRequiredE9")
    total_order_margin_required_e9: StrictStr = Field(description="The sum of initial margin required across all open orders (e9 format).", alias="totalOrderMarginRequiredE9")
    margin_available_e9: StrictStr = Field(description="The amount of margin available to open new positions and orders (e9 format).", alias="marginAvailableE9")
    cross_maintenance_margin_required_e9: StrictStr = Field(description="The sum of maintenance margin required across all cross positions (e9 format).", alias="crossMaintenanceMarginRequiredE9")
    cross_maintenance_margin_available_e9: StrictStr = Field(description="The amount of margin available before liquidation (e9 format).", alias="crossMaintenanceMarginAvailableE9")
    cross_maintenance_margin_ratio_e9: StrictStr = Field(description="The ratio of the maintenance margin required to the account value (e9 format).", alias="crossMaintenanceMarginRatioE9")
    cross_leverage_e9: StrictStr = Field(description="The leverage of the account (e9 format).", alias="crossLeverageE9")
    total_unrealized_pnl_e9: StrictStr = Field(description="Total unrealized profit (e9 format).", alias="totalUnrealizedPnlE9")
    cross_unrealized_pnl_e9: StrictStr = Field(description="Unrealized profit of cross positions (e9 format).", alias="crossUnrealizedPnlE9")
    cross_unrealized_loss_e9: StrictStr = Field(description="An implicitly negative number that sums only the losses of all cross positions.", alias="crossUnrealizedLossE9")
    cross_account_value_e9: StrictStr = Field(description="The total value of the cross account, combining the cross effective balance and unrealized PnL across all cross positions, and subtracting any pending funding payments on any cross position. ", alias="crossAccountValueE9")
    total_account_value_e9: StrictStr = Field(description="The total value of the account, combining the total effective balance and unrealized PnL across all positions, and subtracting any pending funding payments on any position. ", alias="totalAccountValueE9")
    updated_at_millis: StrictInt = Field(description="Last update time in milliseconds since Unix epoch.", alias="updatedAtMillis")
    assets: List[Asset]
    positions: List[Position]
    authorized_accounts: List[StrictStr] = Field(description="Deprecated: Replaced with authorizedWallets.", alias="authorizedAccounts")
    account_address: StrictStr = Field(description="The address of the account.", alias="accountAddress")
    authorized_wallets: List[AuthorizedWallet] = Field(description="The wallets that are authorized to trade on behalf of the current account.", alias="authorizedWallets")
    __properties: ClassVar[List[str]] = ["tradingFees", "canTrade", "canDeposit", "canWithdraw", "crossEffectiveBalanceE9", "crossMarginRequiredE9", "totalOrderMarginRequiredE9", "marginAvailableE9", "crossMaintenanceMarginRequiredE9", "crossMaintenanceMarginAvailableE9", "crossMaintenanceMarginRatioE9", "crossLeverageE9", "totalUnrealizedPnlE9", "crossUnrealizedPnlE9", "crossUnrealizedLossE9", "crossAccountValueE9", "totalAccountValueE9", "updatedAtMillis", "assets", "positions", "authorizedAccounts", "accountAddress", "authorizedWallets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of trading_fees
        if self.trading_fees:
            _dict['tradingFees'] = self.trading_fees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assets (list)
        _items = []
        if self.assets:
            for _item_assets in self.assets:
                if _item_assets:
                    _items.append(_item_assets.to_dict())
            _dict['assets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item_positions in self.positions:
                if _item_positions:
                    _items.append(_item_positions.to_dict())
            _dict['positions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in authorized_wallets (list)
        _items = []
        if self.authorized_wallets:
            for _item_authorized_wallets in self.authorized_wallets:
                if _item_authorized_wallets:
                    _items.append(_item_authorized_wallets.to_dict())
            _dict['authorizedWallets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tradingFees": TradingFees.from_dict(obj["tradingFees"]) if obj.get("tradingFees") is not None else None,
            "canTrade": obj.get("canTrade"),
            "canDeposit": obj.get("canDeposit"),
            "canWithdraw": obj.get("canWithdraw"),
            "crossEffectiveBalanceE9": obj.get("crossEffectiveBalanceE9"),
            "crossMarginRequiredE9": obj.get("crossMarginRequiredE9"),
            "totalOrderMarginRequiredE9": obj.get("totalOrderMarginRequiredE9"),
            "marginAvailableE9": obj.get("marginAvailableE9"),
            "crossMaintenanceMarginRequiredE9": obj.get("crossMaintenanceMarginRequiredE9"),
            "crossMaintenanceMarginAvailableE9": obj.get("crossMaintenanceMarginAvailableE9"),
            "crossMaintenanceMarginRatioE9": obj.get("crossMaintenanceMarginRatioE9"),
            "crossLeverageE9": obj.get("crossLeverageE9"),
            "totalUnrealizedPnlE9": obj.get("totalUnrealizedPnlE9"),
            "crossUnrealizedPnlE9": obj.get("crossUnrealizedPnlE9"),
            "crossUnrealizedLossE9": obj.get("crossUnrealizedLossE9"),
            "crossAccountValueE9": obj.get("crossAccountValueE9"),
            "totalAccountValueE9": obj.get("totalAccountValueE9"),
            "updatedAtMillis": obj.get("updatedAtMillis"),
            "assets": [Asset.from_dict(_item) for _item in obj["assets"]] if obj.get("assets") is not None else None,
            "positions": [Position.from_dict(_item) for _item in obj["positions"]] if obj.get("positions") is not None else None,
            "authorizedAccounts": obj.get("authorizedAccounts"),
            "accountAddress": obj.get("accountAddress"),
            "authorizedWallets": [AuthorizedWallet.from_dict(_item) for _item in obj["authorizedWallets"]] if obj.get("authorizedWallets") is not None else None
        })
        return _obj


