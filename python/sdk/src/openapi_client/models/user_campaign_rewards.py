# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class UserCampaignRewards(BaseModel):
    """
    UserCampaignRewards
    """ # noqa: E501
    user_address: StrictStr = Field(description="User address for the rewards earned data.", alias="UserAddress")
    campaign_name: StrictStr = Field(description="Name of the campaign.", alias="CampaignName")
    epoch_number: StrictInt = Field(description="Epoch number for the rewards earned data.", alias="EpochNumber")
    interval_number: StrictInt = Field(description="Interval number for the rewards earned data.", alias="IntervalNumber")
    symbol: StrictStr = Field(description="Market Symbol.", alias="Symbol")
    status: StrictStr = Field(alias="Status")
    blue_rewards_e9: StrictStr = Field(description="Total blue-perp token rewards earned in the epoch (e9 format).", alias="BlueRewardsE9")
    sui_rewards_e9: StrictStr = Field(description="Total sui-perp token rewards earned in the epoch (e9 format).", alias="SuiRewardsE9")
    wal_rewards_e9: StrictStr = Field(description="Total wal-perp rewards earned in the epoch (e9 format).", alias="WalRewardsE9")
    cash_rewards_e9: StrictStr = Field(description="Total cash rewards earned in the epoch (e9 format).", alias="CashRewardsE9")
    interval_start_date: StrictInt = Field(description="Time in milliseconds for interval start date.", alias="IntervalStartDate")
    interval_end_date: StrictInt = Field(description="Time in milliseconds for interval end date.", alias="IntervalEndDate")
    __properties: ClassVar[List[str]] = ["UserAddress", "CampaignName", "EpochNumber", "IntervalNumber", "Symbol", "Status", "BlueRewardsE9", "SuiRewardsE9", "WalRewardsE9", "CashRewardsE9", "IntervalStartDate", "IntervalEndDate"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ACTIVE', 'NOT_STARTED', 'FINALIZED', 'COOLDOWN']):
            raise ValueError("must be one of enum values ('ACTIVE', 'NOT_STARTED', 'FINALIZED', 'COOLDOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserCampaignRewards from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserCampaignRewards from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "UserAddress": obj.get("UserAddress"),
            "CampaignName": obj.get("CampaignName"),
            "EpochNumber": obj.get("EpochNumber"),
            "IntervalNumber": obj.get("IntervalNumber"),
            "Symbol": obj.get("Symbol"),
            "Status": obj.get("Status"),
            "BlueRewardsE9": obj.get("BlueRewardsE9"),
            "SuiRewardsE9": obj.get("SuiRewardsE9"),
            "WalRewardsE9": obj.get("WalRewardsE9"),
            "CashRewardsE9": obj.get("CashRewardsE9"),
            "IntervalStartDate": obj.get("IntervalStartDate"),
            "IntervalEndDate": obj.get("IntervalEndDate")
        })
        return _obj


