# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.candlestick_update import CandlestickUpdate
from openapi_client.models.mark_price_update import MarkPriceUpdate
from openapi_client.models.market_price_update import MarketPriceUpdate
from openapi_client.models.oracle_price_update import OraclePriceUpdate
from openapi_client.models.orderbook_diff_depth_update import OrderbookDiffDepthUpdate
from openapi_client.models.orderbook_partial_depth_update import OrderbookPartialDepthUpdate
from openapi_client.models.recent_trades_updates import RecentTradesUpdates
from openapi_client.models.ticker_all_update import TickerAllUpdate
from openapi_client.models.ticker_update import TickerUpdate
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

MARKETSTREAMMESSAGEPAYLOAD_ONE_OF_SCHEMAS = ["CandlestickUpdate", "MarkPriceUpdate", "MarketPriceUpdate", "OraclePriceUpdate", "OrderbookDiffDepthUpdate", "OrderbookPartialDepthUpdate", "RecentTradesUpdates", "TickerAllUpdate", "TickerUpdate"]

class MarketStreamMessagePayload(BaseModel):
    """
    The payload of the message, which varies based on the event type.
    """
    # data type: RecentTradesUpdates
    oneof_schema_1_validator: Optional[RecentTradesUpdates] = None
    # data type: TickerUpdate
    oneof_schema_2_validator: Optional[TickerUpdate] = None
    # data type: TickerAllUpdate
    oneof_schema_3_validator: Optional[TickerAllUpdate] = None
    # data type: OraclePriceUpdate
    oneof_schema_4_validator: Optional[OraclePriceUpdate] = None
    # data type: MarkPriceUpdate
    oneof_schema_5_validator: Optional[MarkPriceUpdate] = None
    # data type: MarketPriceUpdate
    oneof_schema_6_validator: Optional[MarketPriceUpdate] = None
    # data type: CandlestickUpdate
    oneof_schema_7_validator: Optional[CandlestickUpdate] = None
    # data type: OrderbookDiffDepthUpdate
    oneof_schema_8_validator: Optional[OrderbookDiffDepthUpdate] = None
    # data type: OrderbookPartialDepthUpdate
    oneof_schema_9_validator: Optional[OrderbookPartialDepthUpdate] = None
    actual_instance: Optional[Union[CandlestickUpdate, MarkPriceUpdate, MarketPriceUpdate, OraclePriceUpdate, OrderbookDiffDepthUpdate, OrderbookPartialDepthUpdate, RecentTradesUpdates, TickerAllUpdate, TickerUpdate]] = None
    one_of_schemas: Set[str] = { "CandlestickUpdate", "MarkPriceUpdate", "MarketPriceUpdate", "OraclePriceUpdate", "OrderbookDiffDepthUpdate", "OrderbookPartialDepthUpdate", "RecentTradesUpdates", "TickerAllUpdate", "TickerUpdate" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = MarketStreamMessagePayload.model_construct()
        error_messages = []
        match = 0
        # validate data type: RecentTradesUpdates
        if not isinstance(v, RecentTradesUpdates):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RecentTradesUpdates`")
        else:
            match += 1
        # validate data type: TickerUpdate
        if not isinstance(v, TickerUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TickerUpdate`")
        else:
            match += 1
        # validate data type: TickerAllUpdate
        if not isinstance(v, TickerAllUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TickerAllUpdate`")
        else:
            match += 1
        # validate data type: OraclePriceUpdate
        if not isinstance(v, OraclePriceUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OraclePriceUpdate`")
        else:
            match += 1
        # validate data type: MarkPriceUpdate
        if not isinstance(v, MarkPriceUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarkPriceUpdate`")
        else:
            match += 1
        # validate data type: MarketPriceUpdate
        if not isinstance(v, MarketPriceUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MarketPriceUpdate`")
        else:
            match += 1
        # validate data type: CandlestickUpdate
        if not isinstance(v, CandlestickUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CandlestickUpdate`")
        else:
            match += 1
        # validate data type: OrderbookDiffDepthUpdate
        if not isinstance(v, OrderbookDiffDepthUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrderbookDiffDepthUpdate`")
        else:
            match += 1
        # validate data type: OrderbookPartialDepthUpdate
        if not isinstance(v, OrderbookPartialDepthUpdate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrderbookPartialDepthUpdate`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in MarketStreamMessagePayload with oneOf schemas: CandlestickUpdate, MarkPriceUpdate, MarketPriceUpdate, OraclePriceUpdate, OrderbookDiffDepthUpdate, OrderbookPartialDepthUpdate, RecentTradesUpdates, TickerAllUpdate, TickerUpdate. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in MarketStreamMessagePayload with oneOf schemas: CandlestickUpdate, MarkPriceUpdate, MarketPriceUpdate, OraclePriceUpdate, OrderbookDiffDepthUpdate, OrderbookPartialDepthUpdate, RecentTradesUpdates, TickerAllUpdate, TickerUpdate. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into RecentTradesUpdates
        try:
            instance.actual_instance = RecentTradesUpdates.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TickerUpdate
        try:
            instance.actual_instance = TickerUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TickerAllUpdate
        try:
            instance.actual_instance = TickerAllUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OraclePriceUpdate
        try:
            instance.actual_instance = OraclePriceUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarkPriceUpdate
        try:
            instance.actual_instance = MarkPriceUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MarketPriceUpdate
        try:
            instance.actual_instance = MarketPriceUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CandlestickUpdate
        try:
            instance.actual_instance = CandlestickUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrderbookDiffDepthUpdate
        try:
            instance.actual_instance = OrderbookDiffDepthUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrderbookPartialDepthUpdate
        try:
            instance.actual_instance = OrderbookPartialDepthUpdate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into MarketStreamMessagePayload with oneOf schemas: CandlestickUpdate, MarkPriceUpdate, MarketPriceUpdate, OraclePriceUpdate, OrderbookDiffDepthUpdate, OrderbookPartialDepthUpdate, RecentTradesUpdates, TickerAllUpdate, TickerUpdate. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into MarketStreamMessagePayload with oneOf schemas: CandlestickUpdate, MarkPriceUpdate, MarketPriceUpdate, OraclePriceUpdate, OrderbookDiffDepthUpdate, OrderbookPartialDepthUpdate, RecentTradesUpdates, TickerAllUpdate, TickerUpdate. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CandlestickUpdate, MarkPriceUpdate, MarketPriceUpdate, OraclePriceUpdate, OrderbookDiffDepthUpdate, OrderbookPartialDepthUpdate, RecentTradesUpdates, TickerAllUpdate, TickerUpdate]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


