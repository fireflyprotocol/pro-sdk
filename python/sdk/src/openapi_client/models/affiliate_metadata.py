# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.affiliate_metadata_fees import AffiliateMetadataFees
from typing import Optional, Set
from typing_extensions import Self

class AffiliateMetadata(BaseModel):
    """
    AffiliateMetadata
    """ # noqa: E501
    user_address: StrictStr = Field(description="The user's wallet address", alias="userAddress")
    parent_referral_code: Optional[StrictStr] = Field(default=None, description="The referral code of the parent affiliate", alias="parentReferralCode")
    referral_code: Optional[StrictStr] = Field(default=None, description="The user's referral code if approved as an affiliate", alias="referralCode")
    name: Optional[StrictStr] = Field(default=None, description="The name of the affiliate")
    parent_name: Optional[StrictStr] = Field(default=None, description="The name of the parent affiliate", alias="parentName")
    fees: Optional[AffiliateMetadataFees] = None
    status: Optional[StrictStr] = Field(default=None, description="Status of the affiliate application")
    has_traded: StrictBool = Field(description="Indicates whether the user has traded or not", alias="hasTraded")
    tier: Optional[StrictStr] = Field(default=None, description="Tier of the affiliate")
    __properties: ClassVar[List[str]] = ["userAddress", "parentReferralCode", "referralCode", "name", "parentName", "fees", "status", "hasTraded", "tier"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING', 'APPROVED', 'REJECTED']):
            raise ValueError("must be one of enum values ('PENDING', 'APPROVED', 'REJECTED')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['S', 'A', 'N', 'U']):
            raise ValueError("must be one of enum values ('S', 'A', 'N', 'U')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AffiliateMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fees
        if self.fees:
            _dict['fees'] = self.fees.to_dict()
        # set to None if parent_referral_code (nullable) is None
        # and model_fields_set contains the field
        if self.parent_referral_code is None and "parent_referral_code" in self.model_fields_set:
            _dict['parentReferralCode'] = None

        # set to None if referral_code (nullable) is None
        # and model_fields_set contains the field
        if self.referral_code is None and "referral_code" in self.model_fields_set:
            _dict['referralCode'] = None

        # set to None if parent_name (nullable) is None
        # and model_fields_set contains the field
        if self.parent_name is None and "parent_name" in self.model_fields_set:
            _dict['parentName'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AffiliateMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userAddress": obj.get("userAddress"),
            "parentReferralCode": obj.get("parentReferralCode"),
            "referralCode": obj.get("referralCode"),
            "name": obj.get("name"),
            "parentName": obj.get("parentName"),
            "fees": AffiliateMetadataFees.from_dict(obj["fees"]) if obj.get("fees") is not None else None,
            "status": obj.get("status"),
            "hasTraded": obj.get("hasTraded"),
            "tier": obj.get("tier")
        })
        return _obj


