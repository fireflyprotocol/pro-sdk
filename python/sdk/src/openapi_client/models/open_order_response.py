# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_side import OrderSide
from openapi_client.models.order_status import OrderStatus
from openapi_client.models.order_time_in_force import OrderTimeInForce
from openapi_client.models.order_type import OrderType
from openapi_client.models.self_trade_prevention_type import SelfTradePreventionType
from typing import Optional, Set
from typing_extensions import Self

class OpenOrderResponse(BaseModel):
    """
    OpenOrderResponse
    """ # noqa: E501
    order_hash: StrictStr = Field(description="The Order Hash, which is the default way to uniquely identify an order in the system", alias="orderHash")
    client_order_id: Optional[StrictStr] = Field(default=None, description="The Client Order ID, which is used a unique identifier for an order, provided by the client, in case of proprietary order management systems", alias="clientOrderId")
    symbol: StrictStr = Field(description="The market symbol")
    account_address: StrictStr = Field(description="The account address of the order. May be an account user is authorized for.", alias="accountAddress")
    price_e9: StrictStr = Field(description="The price in base e9 of the asset to be traded. Should always be a number", alias="priceE9")
    quantity_e9: StrictStr = Field(description="The quantity in base e9 of the asset to be traded. Should always be a number", alias="quantityE9")
    side: OrderSide
    leverage_e9: StrictStr = Field(description="The leverage in base e9  of the order to be traded. Should always be a number", alias="leverageE9")
    is_isolated: StrictBool = Field(description="Is this order isolated or cross margin. Note market must be set to the same mode.", alias="isIsolated")
    salt: StrictStr = Field(description="The random generated SALT. Should always be a number")
    expires_at_millis: StrictInt = Field(description="Unix timestamp in millis at which order will expire. Defaults to 1 month for LIMIT orders if not provided", alias="expiresAtMillis")
    signed_at_millis: StrictInt = Field(description="The timestamp in millis at which the request was signed", alias="signedAtMillis")
    type: OrderType
    reduce_only: StrictBool = Field(description="Is this order to only reduce a position? Default false", alias="reduceOnly")
    post_only: StrictBool = Field(description="If set to TRUE, the order can only be a maker order", alias="postOnly")
    time_in_force: OrderTimeInForce = Field(alias="timeInForce")
    trigger_price_e9: Optional[StrictStr] = Field(default=None, description="Trigger price in base e9 for stop orders. This should always be a number", alias="triggerPriceE9")
    filled_quantity_e9: StrictStr = Field(description="The quantity in base e9 of the asset currently filled. This should always be a number", alias="filledQuantityE9")
    status: OrderStatus
    self_trade_prevention_type: SelfTradePreventionType = Field(alias="selfTradePreventionType")
    order_time_at_millis: StrictInt = Field(description="The timestamp in millis when the order was opened", alias="orderTimeAtMillis")
    last_updated_at_millis: StrictInt = Field(description="The timestamp in millis that this order was last updated (including status updates)", alias="lastUpdatedAtMillis")
    __properties: ClassVar[List[str]] = ["orderHash", "clientOrderId", "symbol", "accountAddress", "priceE9", "quantityE9", "side", "leverageE9", "isIsolated", "salt", "expiresAtMillis", "signedAtMillis", "type", "reduceOnly", "postOnly", "timeInForce", "triggerPriceE9", "filledQuantityE9", "status", "selfTradePreventionType", "orderTimeAtMillis", "lastUpdatedAtMillis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenOrderResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenOrderResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orderHash": obj.get("orderHash"),
            "clientOrderId": obj.get("clientOrderId"),
            "symbol": obj.get("symbol"),
            "accountAddress": obj.get("accountAddress"),
            "priceE9": obj.get("priceE9"),
            "quantityE9": obj.get("quantityE9"),
            "side": obj.get("side"),
            "leverageE9": obj.get("leverageE9"),
            "isIsolated": obj.get("isIsolated") if obj.get("isIsolated") is not None else False,
            "salt": obj.get("salt"),
            "expiresAtMillis": obj.get("expiresAtMillis"),
            "signedAtMillis": obj.get("signedAtMillis"),
            "type": obj.get("type"),
            "reduceOnly": obj.get("reduceOnly") if obj.get("reduceOnly") is not None else False,
            "postOnly": obj.get("postOnly") if obj.get("postOnly") is not None else False,
            "timeInForce": obj.get("timeInForce") if obj.get("timeInForce") is not None else OrderTimeInForce.GTT,
            "triggerPriceE9": obj.get("triggerPriceE9"),
            "filledQuantityE9": obj.get("filledQuantityE9"),
            "status": obj.get("status"),
            "selfTradePreventionType": obj.get("selfTradePreventionType") if obj.get("selfTradePreventionType") is not None else SelfTradePreventionType.MAKER,
            "orderTimeAtMillis": obj.get("orderTimeAtMillis"),
            "lastUpdatedAtMillis": obj.get("lastUpdatedAtMillis")
        })
        return _obj


