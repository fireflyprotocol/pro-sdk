# coding: utf-8

"""
    Bluefin API

    Bluefin API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AffiliateIntervalOverview(BaseModel):
    """
    AffiliateIntervalOverview
    """ # noqa: E501
    user_address: StrictStr = Field(description="The user's wallet address", alias="userAddress")
    name: Optional[StrictStr] = Field(default=None, description="Name of the affiliate")
    interval_number: StrictInt = Field(description="The interval number for the affiliate's earnings data", alias="intervalNumber")
    interval_start_date: StrictInt = Field(description="Start date of the interval in milliseconds", alias="intervalStartDate")
    interval_end_date: StrictInt = Field(description="End date of the interval in milliseconds", alias="intervalEndDate")
    referred_since: StrictStr = Field(description="Date when the user was referred", alias="referredSince")
    perps_referee_earnings: StrictStr = Field(description="Referee earnings from perps trading (e9 format)", alias="perpsRefereeEarnings")
    spot_lp_referee_earnings: StrictStr = Field(description="Referee earnings from spot LP (e9 format)", alias="spotLPRefereeEarnings")
    lending_referee_earnings: StrictStr = Field(description="Referee earnings from lending (e9 format)", alias="lendingRefereeEarnings")
    perps_referral_earnings: StrictStr = Field(description="Referral earnings from perps trading (e9 format)", alias="perpsReferralEarnings")
    spot_lp_referral_earnings: StrictStr = Field(description="Referral earnings from spot LP (e9 format)", alias="spotLPReferralEarnings")
    lending_referral_earnings: StrictStr = Field(description="Referral earnings from lending (e9 format)", alias="lendingReferralEarnings")
    perps_total_earnings: StrictStr = Field(description="Total earnings from perps trading (e9 format)", alias="perpsTotalEarnings")
    spot_lp_total_earnings: StrictStr = Field(description="Total earnings from spot LP (e9 format)", alias="spotLPTotalEarnings")
    lending_total_earnings: StrictStr = Field(description="Total earnings from lending (e9 format)", alias="lendingTotalEarnings")
    total_referral_earnings: StrictStr = Field(description="Total earnings from referrals (e9 format)", alias="totalReferralEarnings")
    total_referee_earnings: StrictStr = Field(description="Total earnings from referee activities (e9 format)", alias="totalRefereeEarnings")
    total_earnings: StrictStr = Field(description="Total earnings combining referrals and referee activities (e9 format)", alias="totalEarnings")
    __properties: ClassVar[List[str]] = ["userAddress", "name", "intervalNumber", "intervalStartDate", "intervalEndDate", "referredSince", "perpsRefereeEarnings", "spotLPRefereeEarnings", "lendingRefereeEarnings", "perpsReferralEarnings", "spotLPReferralEarnings", "lendingReferralEarnings", "perpsTotalEarnings", "spotLPTotalEarnings", "lendingTotalEarnings", "totalReferralEarnings", "totalRefereeEarnings", "totalEarnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AffiliateIntervalOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AffiliateIntervalOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userAddress": obj.get("userAddress"),
            "name": obj.get("name"),
            "intervalNumber": obj.get("intervalNumber"),
            "intervalStartDate": obj.get("intervalStartDate"),
            "intervalEndDate": obj.get("intervalEndDate"),
            "referredSince": obj.get("referredSince"),
            "perpsRefereeEarnings": obj.get("perpsRefereeEarnings"),
            "spotLPRefereeEarnings": obj.get("spotLPRefereeEarnings"),
            "lendingRefereeEarnings": obj.get("lendingRefereeEarnings"),
            "perpsReferralEarnings": obj.get("perpsReferralEarnings"),
            "spotLPReferralEarnings": obj.get("spotLPReferralEarnings"),
            "lendingReferralEarnings": obj.get("lendingReferralEarnings"),
            "perpsTotalEarnings": obj.get("perpsTotalEarnings"),
            "spotLPTotalEarnings": obj.get("spotLPTotalEarnings"),
            "lendingTotalEarnings": obj.get("lendingTotalEarnings"),
            "totalReferralEarnings": obj.get("totalReferralEarnings"),
            "totalRefereeEarnings": obj.get("totalRefereeEarnings"),
            "totalEarnings": obj.get("totalEarnings")
        })
        return _obj


